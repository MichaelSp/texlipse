/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.bibparser.analysis;

import java.util.Hashtable;

import net.sourceforge.texlipse.bibparser.node.ABibtex;
import net.sourceforge.texlipse.bibparser.node.AConcat;
import net.sourceforge.texlipse.bibparser.node.AEntryDef;
import net.sourceforge.texlipse.bibparser.node.AEntrybraceEntry;
import net.sourceforge.texlipse.bibparser.node.AEntryparenEntry;
import net.sourceforge.texlipse.bibparser.node.AIdValOrSid;
import net.sourceforge.texlipse.bibparser.node.AKeyvalDecl;
import net.sourceforge.texlipse.bibparser.node.ANumValOrSid;
import net.sourceforge.texlipse.bibparser.node.AStrbraceStringEntry;
import net.sourceforge.texlipse.bibparser.node.AStrparenStringEntry;
import net.sourceforge.texlipse.bibparser.node.AValueValOrSid;
import net.sourceforge.texlipse.bibparser.node.EOF;
import net.sourceforge.texlipse.bibparser.node.Node;
import net.sourceforge.texlipse.bibparser.node.Start;
import net.sourceforge.texlipse.bibparser.node.TBString;
import net.sourceforge.texlipse.bibparser.node.TComma;
import net.sourceforge.texlipse.bibparser.node.TComment;
import net.sourceforge.texlipse.bibparser.node.TEntryName;
import net.sourceforge.texlipse.bibparser.node.TEquals;
import net.sourceforge.texlipse.bibparser.node.TEstring;
import net.sourceforge.texlipse.bibparser.node.TIdentifier;
import net.sourceforge.texlipse.bibparser.node.TLBrace;
import net.sourceforge.texlipse.bibparser.node.TLParen;
import net.sourceforge.texlipse.bibparser.node.TNumber;
import net.sourceforge.texlipse.bibparser.node.TPreamble;
import net.sourceforge.texlipse.bibparser.node.TQuotec;
import net.sourceforge.texlipse.bibparser.node.TRBrace;
import net.sourceforge.texlipse.bibparser.node.TRParen;
import net.sourceforge.texlipse.bibparser.node.TScribeComment;
import net.sourceforge.texlipse.bibparser.node.TSharp;
import net.sourceforge.texlipse.bibparser.node.TStringLiteral;
import net.sourceforge.texlipse.bibparser.node.TWhitespace;


public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseABibtex(ABibtex node)
    {
        defaultCase(node);
    }

    public void caseAStrbraceStringEntry(AStrbraceStringEntry node)
    {
        defaultCase(node);
    }

    public void caseAStrparenStringEntry(AStrparenStringEntry node)
    {
        defaultCase(node);
    }

    public void caseAEntrybraceEntry(AEntrybraceEntry node)
    {
        defaultCase(node);
    }

    public void caseAEntryparenEntry(AEntryparenEntry node)
    {
        defaultCase(node);
    }

    public void caseAEntryDef(AEntryDef node)
    {
        defaultCase(node);
    }

    public void caseAKeyvalDecl(AKeyvalDecl node)
    {
        defaultCase(node);
    }

    public void caseAConcat(AConcat node)
    {
        defaultCase(node);
    }

    public void caseAValueValOrSid(AValueValOrSid node)
    {
        defaultCase(node);
    }

    public void caseANumValOrSid(ANumValOrSid node)
    {
        defaultCase(node);
    }

    public void caseAIdValOrSid(AIdValOrSid node)
    {
        defaultCase(node);
    }

    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    public void caseTEstring(TEstring node)
    {
        defaultCase(node);
    }

    public void caseTScribeComment(TScribeComment node)
    {
        defaultCase(node);
    }

    public void caseTPreamble(TPreamble node)
    {
        defaultCase(node);
    }

    public void caseTEntryName(TEntryName node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTBString(TBString node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    public void caseTSharp(TSharp node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTQuotec(TQuotec node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
