/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.texparser.lexer;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackReader;

import net.sourceforge.texlipse.texparser.node.EOF;
import net.sourceforge.texlipse.texparser.node.TArgument;
import net.sourceforge.texlipse.texparser.node.TBverbatim;
import net.sourceforge.texlipse.texparser.node.TCbegin;
import net.sourceforge.texlipse.texparser.node.TCbib;
import net.sourceforge.texlipse.texparser.node.TCbibstyle;
import net.sourceforge.texlipse.texparser.node.TCchapter;
import net.sourceforge.texlipse.texparser.node.TCcite;
import net.sourceforge.texlipse.texparser.node.TCend;
import net.sourceforge.texlipse.texparser.node.TCinclude;
import net.sourceforge.texlipse.texparser.node.TCinput;
import net.sourceforge.texlipse.texparser.node.TClabel;
import net.sourceforge.texlipse.texparser.node.TCnew;
import net.sourceforge.texlipse.texparser.node.TCommentline;
import net.sourceforge.texlipse.texparser.node.TCparagraph;
import net.sourceforge.texlipse.texparser.node.TCpart;
import net.sourceforge.texlipse.texparser.node.TCpindex;
import net.sourceforge.texlipse.texparser.node.TCref;
import net.sourceforge.texlipse.texparser.node.TCrenew;
import net.sourceforge.texlipse.texparser.node.TCsection;
import net.sourceforge.texlipse.texparser.node.TCspace;
import net.sourceforge.texlipse.texparser.node.TCssection;
import net.sourceforge.texlipse.texparser.node.TCsssection;
import net.sourceforge.texlipse.texparser.node.TCsymbol;
import net.sourceforge.texlipse.texparser.node.TCverb;
import net.sourceforge.texlipse.texparser.node.TCword;
import net.sourceforge.texlipse.texparser.node.TEverbatim;
import net.sourceforge.texlipse.texparser.node.TLBrace;
import net.sourceforge.texlipse.texparser.node.TLBracket;
import net.sourceforge.texlipse.texparser.node.TOptargument;
import net.sourceforge.texlipse.texparser.node.TRBrace;
import net.sourceforge.texlipse.texparser.node.TRBracket;
import net.sourceforge.texlipse.texparser.node.TStar;
import net.sourceforge.texlipse.texparser.node.TVtext;
import net.sourceforge.texlipse.texparser.node.TWhitespace;
import net.sourceforge.texlipse.texparser.node.TWord;
import net.sourceforge.texlipse.texparser.node.Token;


public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERBATIM; break;
                                case 0: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERB; break;
                                case 0: state = State.VERB; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.BLOCKCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OPTCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new1(int line, int pos) { return new TCpart(line, pos); }
    Token new2(int line, int pos) { return new TCchapter(line, pos); }
    Token new3(int line, int pos) { return new TCsection(line, pos); }
    Token new4(int line, int pos) { return new TCssection(line, pos); }
    Token new5(int line, int pos) { return new TCsssection(line, pos); }
    Token new6(int line, int pos) { return new TCparagraph(line, pos); }
    Token new7(int line, int pos) { return new TCbib(line, pos); }
    Token new8(int line, int pos) { return new TCbibstyle(line, pos); }
    Token new9(int line, int pos) { return new TClabel(line, pos); }
    Token new10(String text, int line, int pos) { return new TCref(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TCcite(text, line, pos); }
    Token new12(int line, int pos) { return new TCbegin(line, pos); }
    Token new13(int line, int pos) { return new TCend(line, pos); }
    Token new14(int line, int pos) { return new TCinput(line, pos); }
    Token new15(int line, int pos) { return new TCinclude(line, pos); }
    Token new16(String text, int line, int pos) { return new TCnew(text, line, pos); }
    Token new17(int line, int pos) { return new TCrenew(line, pos); }
    Token new18(int line, int pos) { return new TCpindex(line, pos); }
    Token new19(String text, int line, int pos) { return new TBverbatim(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TEverbatim(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TVtext(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TCverb(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TArgument(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TOptargument(text, line, pos); }
    Token new25(int line, int pos) { return new TStar(line, pos); }
    Token new26(int line, int pos) { return new TLBrace(line, pos); }
    Token new27(int line, int pos) { return new TRBrace(line, pos); }
    Token new28(int line, int pos) { return new TLBracket(line, pos); }
    Token new29(int line, int pos) { return new TRBracket(line, pos); }
    Token new30(String text, int line, int pos) { return new TCword(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TCsymbol(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TCspace(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TWord(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TCommentline(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 90, 1}, {91, 91, 8}, {92, 92, 9}, {93, 93, 10}, {94, 122, 1}, {123, 123, 11}, {124, 124, 1}, {125, 125, 12}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 13}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 14}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 16}, {10, 10, 17}, {11, 12, 15}, {13, 13, 18}, {14, 31, 15}, {32, 32, 16}, {33, 90, 15}, {91, 93, 16}, {94, 122, 15}, {123, 123, 16}, {124, 124, 15}, {125, 125, 16}, {126, 65535, 15}, },
            {},
            {{0, 8, 19}, {9, 9, 20}, {10, 10, 21}, {11, 11, 19}, {12, 12, 22}, {13, 13, 23}, {14, 31, 19}, {32, 32, 24}, {33, 64, 19}, {65, 90, 25}, {91, 96, 19}, {97, 97, 25}, {98, 98, 26}, {99, 99, 27}, {100, 100, 25}, {101, 101, 28}, {102, 104, 25}, {105, 105, 29}, {106, 107, 25}, {108, 108, 30}, {109, 109, 25}, {110, 110, 31}, {111, 111, 25}, {112, 112, 32}, {113, 113, 25}, {114, 114, 33}, {115, 115, 34}, {116, 117, 25}, {118, 118, 35}, {119, 122, 25}, {123, 65535, 19}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -9}, },
            {{0, 9, 16}, {10, 10, 17}, {11, 12, 16}, {13, 13, 18}, {14, 65535, 16}, },
            {},
            {{10, 10, 36}, },
            {},
            {},
            {},
            {},
            {{10, 10, 37}, },
            {},
            {{65, 90, 25}, {97, 98, 25}, {99, 99, 38}, {100, 122, 25}, },
            {{65, 99, -27}, {100, 100, 25}, {101, 101, 39}, {102, 104, 25}, {105, 105, 40}, {106, 122, 25}, },
            {{65, 99, -27}, {100, 103, 25}, {104, 104, 41}, {105, 105, 42}, {106, 122, 25}, },
            {{65, 99, -27}, {100, 109, 25}, {110, 110, 43}, {111, 122, 25}, },
            {{65, 109, -30}, {110, 110, 44}, {111, 122, 25}, },
            {{65, 90, 25}, {97, 97, 45}, {98, 98, 25}, {99, 122, -27}, },
            {{65, 100, -28}, {101, 101, 46}, {102, 122, 25}, },
            {{65, 90, 25}, {97, 97, 47}, {98, 99, -32}, {100, 113, 25}, {114, 114, 48}, {115, 122, 25}, },
            {{65, 100, -28}, {101, 101, 49}, {102, 122, 25}, },
            {{65, 100, -28}, {101, 101, 50}, {102, 116, 25}, {117, 117, 51}, {118, 122, 25}, },
            {{65, 100, -28}, {101, 101, 52}, {102, 122, 25}, },
            {},
            {},
            {{65, 99, -27}, {100, 104, 25}, {105, 105, 53}, {106, 122, 25}, },
            {{65, 99, -27}, {100, 102, 25}, {103, 103, 54}, {104, 122, 25}, },
            {{65, 90, 25}, {97, 97, 25}, {98, 98, 55}, {99, 122, -27}, },
            {{65, 90, 25}, {97, 97, 56}, {98, 122, -32}, },
            {{65, 99, -27}, {100, 115, 25}, {116, 116, 57}, {117, 122, 25}, },
            {{65, 99, -27}, {100, 100, 58}, {101, 122, 25}, },
            {{65, 98, -27}, {99, 99, 59}, {100, 111, 25}, {112, 112, 60}, {113, 122, 25}, },
            {{65, 97, -42}, {98, 98, 61}, {99, 122, -27}, },
            {{65, 99, -27}, {100, 118, 25}, {119, 119, 62}, {120, 120, 63}, {121, 122, 25}, },
            {{65, 102, -41}, {103, 103, 64}, {104, 113, 25}, {114, 114, 65}, {115, 122, 25}, },
            {{65, 104, -40}, {105, 105, 66}, {106, 110, 25}, {111, 111, 67}, {112, 122, 25}, },
            {{65, 99, -27}, {100, 101, 25}, {102, 102, 68}, {103, 109, 25}, {110, 110, 69}, {111, 122, 25}, },
            {{65, 98, -27}, {99, 99, 70}, {100, 122, 25}, },
            {{65, 97, -42}, {98, 98, 71}, {99, 122, -27}, },
            {{65, 99, -27}, {100, 113, 25}, {114, 114, 72}, {115, 122, 25}, },
            {{65, 115, -44}, {116, 116, 73}, {117, 122, 25}, },
            {{65, 104, -40}, {105, 105, 74}, {106, 122, 25}, },
            {{65, 99, -27}, {100, 107, 25}, {108, 108, 75}, {109, 122, 25}, },
            {{65, 99, -27}, {100, 111, 25}, {112, 112, 76}, {113, 122, 25}, },
            {{65, 100, -28}, {101, 101, 77}, {102, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 105, -40}, {106, 107, 25}, {108, 108, 78}, {109, 122, 25}, },
            {{65, 99, -27}, {100, 116, 25}, {117, 117, 79}, {118, 122, 25}, },
            {{65, 100, -28}, {101, 101, 80}, {102, 122, 25}, },
            {{65, 98, -27}, {99, 99, 81}, {100, 122, 25}, },
            {{65, 115, -44}, {116, 116, 82}, {117, 122, 25}, },
            {{65, 100, -28}, {101, 101, 83}, {102, 122, 25}, },
            {{65, 90, 25}, {97, 97, 84}, {98, 99, -32}, {100, 115, 25}, {116, 116, 85}, {117, 122, 25}, },
            {{65, 109, -30}, {110, 110, 86}, {111, 122, 25}, },
            {{65, 99, -27}, {100, 117, 25}, {118, 118, 87}, {119, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 100, -28}, {101, 101, 88}, {102, 122, 25}, },
            {{65, 105, -40}, {106, 115, 25}, {116, 116, 89}, {117, 122, 25}, },
            {{65, 99, -27}, {100, 114, 25}, {115, 115, 90}, {116, 122, 25}, },
            {{65, 97, -42}, {98, 98, 91}, {99, 122, -27}, },
            {{65, 100, -28}, {101, 101, 92}, {102, 122, 25}, },
            {{65, 109, -30}, {110, 110, 93}, {111, 122, 25}, },
            {{65, 104, -40}, {105, 105, 94}, {106, 122, 25}, },
            {{65, 115, -44}, {116, 116, 95}, {117, 122, 25}, },
            {{65, 90, 96}, {97, 98, 96}, {99, 99, 97}, {100, 122, 96}, },
            {{65, 116, -62}, {117, 117, 98}, {118, 122, 25}, },
            {{65, 115, -44}, {116, 116, 99}, {117, 122, 25}, },
            {{65, 107, -57}, {108, 108, 100}, {109, 122, 25}, },
            {{65, 105, -40}, {106, 110, 25}, {111, 111, 101}, {112, 122, 25}, },
            {{65, 98, -27}, {99, 99, 102}, {100, 122, 25}, },
            {{65, 113, -54}, {114, 114, 103}, {115, 122, 25}, },
            {{65, 102, -41}, {103, 103, 104}, {104, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 115, -44}, {116, 116, 105}, {117, 122, 25}, },
            {{65, 104, -40}, {105, 105, 106}, {106, 122, 25}, },
            {{65, 118, -48}, {119, 119, 107}, {120, 122, 25}, },
            {{65, 104, -40}, {105, 105, 108}, {106, 122, 25}, },
            {{65, 100, -28}, {101, 101, 109}, {102, 116, 25}, {117, 117, 110}, {118, 122, 25}, },
            {{42, 42, 111}, {65, 122, -27}, },
            {{65, 122, -27}, },
            {{9, 9, 112}, {10, 10, 113}, {12, 12, 114}, {13, 13, 115}, {32, 32, 116}, {65, 122, -27}, {123, 123, 117}, },
            {{65, 99, -27}, {100, 110, 25}, {111, 111, 118}, {112, 122, 25}, },
            {{65, 100, -28}, {101, 101, 119}, {102, 122, 25}, },
            {{65, 122, -79}, },
            {{65, 99, -79}, {100, 104, 96}, {105, 105, 120}, {106, 122, 96}, },
            {{65, 99, -27}, {100, 100, 121}, {101, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 122, -27}, },
            {{65, 99, -27}, {100, 108, 25}, {109, 109, 122}, {110, 122, 25}, },
            {{65, 104, -40}, {105, 105, 123}, {106, 122, 25}, },
            {{65, 100, -28}, {101, 101, 124}, {102, 122, 25}, },
            {{65, 113, -54}, {114, 114, 125}, {115, 122, 25}, },
            {{65, 104, -40}, {105, 105, 126}, {106, 122, 25}, },
            {{65, 99, -27}, {100, 100, 127}, {101, 122, 25}, },
            {{65, 98, -27}, {99, 99, 128}, {100, 122, 25}, },
            {{65, 110, -96}, {111, 111, 129}, {112, 122, 25}, },
            {{65, 98, -27}, {99, 99, 130}, {100, 122, 25}, },
            {{65, 97, -42}, {98, 98, 131}, {99, 122, -27}, },
            {},
            {{9, 32, -95}, {123, 123, 117}, },
            {{9, 123, -114}, },
            {{9, 123, -114}, },
            {{9, 9, 112}, {10, 10, 132}, {12, 123, -114}, },
            {{9, 123, -114}, },
            {{118, 118, 133}, },
            {{65, 102, -41}, {103, 103, 134}, {104, 122, 25}, },
            {{65, 113, -54}, {114, 114, 135}, {115, 122, 25}, },
            {{65, 99, -79}, {100, 115, 96}, {116, 116, 136}, {117, 122, 96}, },
            {{65, 100, -28}, {101, 101, 137}, {102, 122, 25}, },
            {{65, 108, -103}, {109, 109, 138}, {110, 122, 25}, },
            {{65, 115, -44}, {116, 116, 139}, {117, 122, 25}, },
            {{65, 101, -51}, {102, 102, 140}, {103, 122, 25}, },
            {{65, 90, 25}, {97, 97, 141}, {98, 122, -32}, },
            {{65, 109, -30}, {110, 110, 142}, {111, 122, 25}, },
            {{65, 100, -28}, {101, 101, 143}, {102, 122, 25}, },
            {{65, 110, -83}, {111, 111, 144}, {112, 122, 25}, },
            {{65, 109, -30}, {110, 110, 145}, {111, 122, 25}, },
            {{65, 115, -72}, {116, 116, 146}, {117, 122, 25}, },
            {{65, 114, -73}, {115, 115, 147}, {116, 122, 25}, },
            {{9, 123, -114}, },
            {{101, 101, 148}, },
            {{65, 113, -54}, {114, 114, 149}, {115, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 99, -79}, {100, 100, 96}, {101, 101, 150}, {102, 122, 96}, },
            {{65, 122, -27}, },
            {{65, 90, 25}, {97, 97, 151}, {98, 122, -32}, },
            {{65, 100, -28}, {101, 101, 152}, {102, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 111, -58}, {112, 112, 153}, {113, 122, 25}, },
            {{65, 99, -27}, {100, 100, 154}, {101, 122, 25}, },
            {{65, 98, -27}, {99, 99, 155}, {100, 122, 25}, },
            {{65, 108, -103}, {109, 109, 156}, {110, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 104, -40}, {105, 105, 157}, {106, 122, 25}, },
            {{65, 100, -28}, {101, 101, 158}, {102, 122, 25}, },
            {{114, 114, 159}, },
            {{65, 90, 25}, {97, 97, 160}, {98, 122, -32}, },
            {{65, 122, -79}, },
            {{65, 109, -30}, {110, 110, 161}, {111, 122, 25}, },
            {{65, 90, 162}, {97, 98, 162}, {99, 99, 163}, {100, 122, 162}, },
            {{65, 103, -29}, {104, 104, 164}, {105, 122, 25}, },
            {{65, 100, -28}, {101, 101, 165}, {102, 122, 25}, },
            {{65, 110, -83}, {111, 111, 166}, {112, 122, 25}, },
            {{65, 108, -103}, {109, 109, 167}, {110, 122, 25}, },
            {{65, 110, -96}, {111, 111, 168}, {112, 122, 25}, },
            {{65, 98, -27}, {99, 99, 169}, {100, 122, 25}, },
            {{98, 98, 170}, },
            {{65, 111, -58}, {112, 112, 171}, {113, 122, 25}, },
            {{65, 99, -27}, {100, 100, 172}, {101, 122, 25}, },
            {{65, 122, -154}, },
            {{65, 99, -154}, {100, 104, 162}, {105, 105, 173}, {106, 122, 162}, },
            {{65, 122, -27}, },
            {{65, 99, -27}, {100, 119, 25}, {120, 120, 174}, {121, 122, 25}, },
            {{65, 108, -103}, {109, 109, 175}, {110, 122, 25}, },
            {{65, 90, 25}, {97, 97, 176}, {98, 122, -32}, },
            {{65, 109, -30}, {110, 110, 177}, {111, 122, 25}, },
            {{65, 115, -72}, {116, 116, 178}, {117, 122, 25}, },
            {{97, 97, 179}, },
            {{65, 103, -29}, {104, 104, 180}, {105, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 99, -154}, {100, 115, 162}, {116, 116, 181}, {117, 122, 162}, },
            {{65, 122, -27}, },
            {{65, 108, -103}, {109, 109, 182}, {110, 122, 25}, },
            {{65, 109, -30}, {110, 110, 183}, {111, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 104, -40}, {105, 105, 184}, {106, 122, 25}, },
            {{116, 116, 185}, },
            {{65, 99, -27}, {100, 120, 25}, {121, 121, 186}, {122, 122, 25}, },
            {{65, 99, -154}, {100, 100, 162}, {101, 101, 187}, {102, 122, 162}, },
            {{65, 90, 25}, {97, 97, 188}, {98, 122, -32}, },
            {{65, 99, -27}, {100, 100, 189}, {101, 122, 25}, },
            {{65, 110, -96}, {111, 111, 190}, {112, 122, 25}, },
            {{105, 105, 191}, },
            {{65, 114, -73}, {115, 115, 192}, {116, 122, 25}, },
            {{65, 122, -154}, },
            {{65, 109, -30}, {110, 110, 193}, {111, 122, 25}, },
            {{65, 122, -27}, },
            {{65, 109, -30}, {110, 110, 194}, {111, 122, 25}, },
            {{109, 109, 195}, },
            {{65, 115, -44}, {116, 116, 196}, {117, 122, 25}, },
            {{65, 99, -27}, {100, 100, 197}, {101, 122, 25}, },
            {{65, 122, -27}, },
            {{42, 42, 198}, {125, 125, 199}, },
            {{65, 120, -182}, {121, 121, 200}, {122, 122, 25}, },
            {{65, 122, -27}, },
            {{125, 125, 201}, },
            {},
            {{65, 107, -57}, {108, 108, 202}, {109, 122, 25}, },
            {},
            {{65, 100, -28}, {101, 101, 203}, {102, 122, 25}, },
            {{65, 122, -27}, },
        }
        { // COMCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 41, 1}, {42, 42, 8}, {43, 90, 1}, {91, 91, 9}, {92, 92, 10}, {93, 93, 11}, {94, 122, 1}, {123, 123, 12}, {124, 124, 1}, {125, 125, 13}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 14}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 15}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 17}, {10, 10, 18}, {11, 12, 16}, {13, 13, 19}, {14, 31, 16}, {32, 32, 17}, {33, 90, 16}, {91, 93, 17}, {94, 122, 16}, {123, 123, 17}, {124, 124, 16}, {125, 125, 17}, {126, 65535, 16}, },
            {{0, 65535, -3}, },
            {},
            {{0, 8, 20}, {9, 9, 21}, {10, 10, 22}, {11, 11, 20}, {12, 12, 23}, {13, 13, 24}, {14, 31, 20}, {32, 32, 25}, {33, 64, 20}, {65, 90, 26}, {91, 96, 20}, {97, 97, 26}, {98, 98, 27}, {99, 99, 28}, {100, 100, 26}, {101, 101, 29}, {102, 104, 26}, {105, 105, 30}, {106, 107, 26}, {108, 108, 31}, {109, 109, 26}, {110, 110, 32}, {111, 111, 26}, {112, 112, 33}, {113, 113, 26}, {114, 114, 34}, {115, 115, 35}, {116, 117, 26}, {118, 118, 36}, {119, 122, 26}, {123, 65535, 20}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -9}, },
            {{0, 9, 17}, {10, 10, 18}, {11, 12, 17}, {13, 13, 19}, {14, 65535, 17}, },
            {},
            {{10, 10, 37}, },
            {},
            {},
            {},
            {},
            {{10, 10, 38}, },
            {},
            {{65, 90, 26}, {97, 98, 26}, {99, 99, 39}, {100, 122, 26}, },
            {{65, 99, -28}, {100, 100, 26}, {101, 101, 40}, {102, 104, 26}, {105, 105, 41}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 103, 26}, {104, 104, 42}, {105, 105, 43}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 109, 26}, {110, 110, 44}, {111, 122, 26}, },
            {{65, 109, -31}, {110, 110, 45}, {111, 122, 26}, },
            {{65, 90, 26}, {97, 97, 46}, {98, 98, 26}, {99, 122, -28}, },
            {{65, 100, -29}, {101, 101, 47}, {102, 122, 26}, },
            {{65, 90, 26}, {97, 97, 48}, {98, 99, -33}, {100, 113, 26}, {114, 114, 49}, {115, 122, 26}, },
            {{65, 100, -29}, {101, 101, 50}, {102, 122, 26}, },
            {{65, 100, -29}, {101, 101, 51}, {102, 116, 26}, {117, 117, 52}, {118, 122, 26}, },
            {{65, 100, -29}, {101, 101, 53}, {102, 122, 26}, },
            {},
            {},
            {{65, 99, -28}, {100, 104, 26}, {105, 105, 54}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 102, 26}, {103, 103, 55}, {104, 122, 26}, },
            {{65, 90, 26}, {97, 97, 26}, {98, 98, 56}, {99, 122, -28}, },
            {{65, 90, 26}, {97, 97, 57}, {98, 122, -33}, },
            {{65, 99, -28}, {100, 115, 26}, {116, 116, 58}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 100, 59}, {101, 122, 26}, },
            {{65, 98, -28}, {99, 99, 60}, {100, 111, 26}, {112, 112, 61}, {113, 122, 26}, },
            {{65, 97, -43}, {98, 98, 62}, {99, 122, -28}, },
            {{65, 99, -28}, {100, 118, 26}, {119, 119, 63}, {120, 120, 64}, {121, 122, 26}, },
            {{65, 102, -42}, {103, 103, 65}, {104, 113, 26}, {114, 114, 66}, {115, 122, 26}, },
            {{65, 99, -28}, {100, 110, 26}, {111, 111, 67}, {112, 122, 26}, },
            {{65, 99, -28}, {100, 101, 26}, {102, 102, 68}, {103, 109, 26}, {110, 110, 69}, {111, 122, 26}, },
            {{65, 98, -28}, {99, 99, 70}, {100, 122, 26}, },
            {{65, 97, -43}, {98, 98, 71}, {99, 122, -28}, },
            {{65, 99, -28}, {100, 113, 26}, {114, 114, 72}, {115, 122, 26}, },
            {{65, 115, -45}, {116, 116, 73}, {117, 122, 26}, },
            {{65, 104, -41}, {105, 105, 74}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 107, 26}, {108, 108, 75}, {109, 122, 26}, },
            {{65, 99, -28}, {100, 111, 26}, {112, 112, 76}, {113, 122, 26}, },
            {{65, 100, -29}, {101, 101, 77}, {102, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 105, -41}, {106, 107, 26}, {108, 108, 78}, {109, 122, 26}, },
            {{65, 99, -28}, {100, 116, 26}, {117, 117, 79}, {118, 122, 26}, },
            {{65, 100, -29}, {101, 101, 80}, {102, 122, 26}, },
            {{65, 98, -28}, {99, 99, 81}, {100, 122, 26}, },
            {{65, 115, -45}, {116, 116, 82}, {117, 122, 26}, },
            {{65, 100, -29}, {101, 101, 83}, {102, 122, 26}, },
            {{65, 90, 26}, {97, 97, 84}, {98, 99, -33}, {100, 115, 26}, {116, 116, 85}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 117, 26}, {118, 118, 86}, {119, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 100, -29}, {101, 101, 87}, {102, 122, 26}, },
            {{65, 105, -41}, {106, 115, 26}, {116, 116, 88}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 114, 26}, {115, 115, 89}, {116, 122, 26}, },
            {{65, 97, -43}, {98, 98, 90}, {99, 122, -28}, },
            {{65, 100, -29}, {101, 101, 91}, {102, 122, 26}, },
            {{65, 109, -31}, {110, 110, 92}, {111, 122, 26}, },
            {{65, 104, -41}, {105, 105, 93}, {106, 122, 26}, },
            {{65, 115, -45}, {116, 116, 94}, {117, 122, 26}, },
            {{65, 90, 95}, {97, 98, 95}, {99, 99, 96}, {100, 122, 95}, },
            {{65, 116, -63}, {117, 117, 97}, {118, 122, 26}, },
            {{65, 115, -45}, {116, 116, 98}, {117, 122, 26}, },
            {{65, 107, -58}, {108, 108, 99}, {109, 122, 26}, },
            {{65, 105, -41}, {106, 110, 26}, {111, 111, 100}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 101}, {100, 122, 26}, },
            {{65, 113, -55}, {114, 114, 102}, {115, 122, 26}, },
            {{65, 102, -42}, {103, 103, 103}, {104, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 104, -41}, {105, 105, 104}, {106, 122, 26}, },
            {{65, 118, -49}, {119, 119, 105}, {120, 122, 26}, },
            {{65, 104, -41}, {105, 105, 106}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 107}, {102, 116, 26}, {117, 117, 108}, {118, 122, 26}, },
            {{42, 42, 109}, {65, 122, -28}, },
            {{65, 122, -28}, },
            {{9, 9, 110}, {10, 10, 111}, {12, 12, 112}, {13, 13, 113}, {32, 32, 114}, {65, 122, -28}, {123, 123, 115}, },
            {{65, 110, -51}, {111, 111, 116}, {112, 122, 26}, },
            {{65, 100, -29}, {101, 101, 117}, {102, 122, 26}, },
            {{65, 122, -79}, },
            {{65, 99, -79}, {100, 104, 95}, {105, 105, 118}, {106, 122, 95}, },
            {{65, 99, -28}, {100, 100, 119}, {101, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 99, -28}, {100, 108, 26}, {109, 109, 120}, {110, 122, 26}, },
            {{65, 104, -41}, {105, 105, 121}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 122}, {102, 122, 26}, },
            {{65, 113, -55}, {114, 114, 123}, {115, 122, 26}, },
            {{65, 99, -28}, {100, 100, 124}, {101, 122, 26}, },
            {{65, 98, -28}, {99, 99, 125}, {100, 122, 26}, },
            {{65, 110, -51}, {111, 111, 126}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 127}, {100, 122, 26}, },
            {{65, 97, -43}, {98, 98, 128}, {99, 122, -28}, },
            {},
            {{9, 32, -94}, {123, 123, 115}, },
            {{9, 123, -112}, },
            {{9, 123, -112}, },
            {{9, 9, 110}, {10, 10, 129}, {12, 123, -112}, },
            {{9, 123, -112}, },
            {{118, 118, 130}, },
            {{65, 102, -42}, {103, 103, 131}, {104, 122, 26}, },
            {{65, 113, -55}, {114, 114, 132}, {115, 122, 26}, },
            {{65, 99, -79}, {100, 115, 95}, {116, 116, 133}, {117, 122, 95}, },
            {{65, 100, -29}, {101, 101, 134}, {102, 122, 26}, },
            {{65, 108, -102}, {109, 109, 135}, {110, 122, 26}, },
            {{65, 115, -45}, {116, 116, 136}, {117, 122, 26}, },
            {{65, 101, -52}, {102, 102, 137}, {103, 122, 26}, },
            {{65, 90, 26}, {97, 97, 138}, {98, 122, -33}, },
            {{65, 100, -29}, {101, 101, 139}, {102, 122, 26}, },
            {{65, 110, -83}, {111, 111, 140}, {112, 122, 26}, },
            {{65, 109, -31}, {110, 110, 141}, {111, 122, 26}, },
            {{65, 115, -72}, {116, 116, 142}, {117, 122, 26}, },
            {{65, 114, -73}, {115, 115, 143}, {116, 122, 26}, },
            {{9, 123, -112}, },
            {{101, 101, 144}, },
            {{65, 113, -55}, {114, 114, 145}, {115, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 99, -79}, {100, 100, 95}, {101, 101, 146}, {102, 122, 95}, },
            {{65, 122, -28}, },
            {{65, 90, 26}, {97, 97, 147}, {98, 122, -33}, },
            {{65, 100, -29}, {101, 101, 148}, {102, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 111, -59}, {112, 112, 149}, {113, 122, 26}, },
            {{65, 98, -28}, {99, 99, 150}, {100, 122, 26}, },
            {{65, 108, -102}, {109, 109, 151}, {110, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 104, -41}, {105, 105, 152}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 153}, {102, 122, 26}, },
            {{114, 114, 154}, },
            {{65, 90, 26}, {97, 97, 155}, {98, 122, -33}, },
            {{65, 122, -79}, },
            {{65, 109, -31}, {110, 110, 156}, {111, 122, 26}, },
            {{65, 90, 157}, {97, 98, 157}, {99, 99, 158}, {100, 122, 157}, },
            {{65, 103, -30}, {104, 104, 159}, {105, 122, 26}, },
            {{65, 110, -83}, {111, 111, 160}, {112, 122, 26}, },
            {{65, 108, -102}, {109, 109, 161}, {110, 122, 26}, },
            {{65, 110, -51}, {111, 111, 162}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 163}, {100, 122, 26}, },
            {{98, 98, 164}, },
            {{65, 111, -59}, {112, 112, 165}, {113, 122, 26}, },
            {{65, 99, -28}, {100, 100, 166}, {101, 122, 26}, },
            {{65, 122, -150}, },
            {{65, 99, -150}, {100, 104, 157}, {105, 105, 167}, {106, 122, 157}, },
            {{65, 122, -28}, },
            {{65, 108, -102}, {109, 109, 168}, {110, 122, 26}, },
            {{65, 90, 26}, {97, 97, 169}, {98, 122, -33}, },
            {{65, 109, -31}, {110, 110, 170}, {111, 122, 26}, },
            {{65, 115, -72}, {116, 116, 171}, {117, 122, 26}, },
            {{97, 97, 172}, },
            {{65, 103, -30}, {104, 104, 173}, {105, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 99, -150}, {100, 115, 157}, {116, 116, 174}, {117, 122, 157}, },
            {{65, 108, -102}, {109, 109, 175}, {110, 122, 26}, },
            {{65, 109, -31}, {110, 110, 176}, {111, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 104, -41}, {105, 105, 177}, {106, 122, 26}, },
            {{116, 116, 178}, },
            {{65, 99, -28}, {100, 120, 26}, {121, 121, 179}, {122, 122, 26}, },
            {{65, 99, -150}, {100, 100, 157}, {101, 101, 180}, {102, 122, 157}, },
            {{65, 90, 26}, {97, 97, 181}, {98, 122, -33}, },
            {{65, 99, -28}, {100, 100, 182}, {101, 122, 26}, },
            {{65, 110, -51}, {111, 111, 183}, {112, 122, 26}, },
            {{105, 105, 184}, },
            {{65, 114, -73}, {115, 115, 185}, {116, 122, 26}, },
            {{65, 122, -150}, },
            {{65, 109, -31}, {110, 110, 186}, {111, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 109, -31}, {110, 110, 187}, {111, 122, 26}, },
            {{109, 109, 188}, },
            {{65, 115, -45}, {116, 116, 189}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 100, 190}, {101, 122, 26}, },
            {{65, 122, -28}, },
            {{42, 42, 191}, {125, 125, 192}, },
            {{65, 120, -175}, {121, 121, 193}, {122, 122, 26}, },
            {{65, 122, -28}, },
            {{125, 125, 194}, },
            {},
            {{65, 107, -58}, {108, 108, 195}, {109, 122, 26}, },
            {},
            {{65, 100, -29}, {101, 101, 196}, {102, 122, 26}, },
            {{65, 122, -28}, },
        }
        { // BLOCKCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 122, 1}, {123, 123, 8}, {124, 124, 1}, {125, 125, 9}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 91, 1}, {93, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 10}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 91, -2}, {93, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 11}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 12}, {9, 9, 13}, {10, 10, 14}, {11, 11, 12}, {12, 12, 15}, {13, 13, 16}, {14, 31, 12}, {32, 32, 17}, {33, 64, 12}, {65, 90, 18}, {91, 96, 12}, {97, 122, 18}, {123, 65535, 12}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 19}, },
            {},
            {{65, 90, 18}, {97, 122, 18}, },
            {},
        }
        { // OPTCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 90, 1}, {91, 91, 7}, {92, 92, 8}, {93, 93, 9}, {94, 122, 1}, {123, 123, 10}, {124, 124, 1}, {125, 125, 11}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 12}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 90, -2}, {94, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 13}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 8, 14}, {9, 9, 15}, {10, 10, 16}, {11, 11, 14}, {12, 12, 17}, {13, 13, 18}, {14, 31, 14}, {32, 32, 19}, {33, 64, 14}, {65, 90, 20}, {91, 96, 14}, {97, 122, 20}, {123, 65535, 14}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 21}, },
            {},
            {{65, 90, 20}, {97, 122, 20}, },
            {},
        }
        { // VERBATIM
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 8}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 9}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{101, 101, 10}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{110, 110, 11}, },
            {{100, 100, 12}, },
            {{123, 123, 13}, },
            {{118, 118, 14}, },
            {{101, 101, 15}, },
            {{114, 114, 16}, },
            {{98, 98, 17}, },
            {{97, 97, 18}, },
            {{116, 116, 19}, },
            {{105, 105, 20}, },
            {{109, 109, 21}, },
            {{42, 42, 22}, {125, 125, 23}, },
            {{125, 125, 24}, },
            {},
            {},
        }
        { // VERB
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 7}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 8}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 33, 0, 0, 0, 0, 0, 33, 28, -1, 29, 26, 27, 0, 0, 33, 34, 34, 34, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 30, 22, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 30, 3, 30, 30, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 30, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 30, -1, 30, 16, 11, 18, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // COMCAPT
        {-1, 33, 0, 0, 0, 0, 0, 33, 25, 28, -1, 29, 26, 27, 0, 0, 33, 34, 34, 34, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 22, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 3, 30, 30, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, -1, 30, 16, 11, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // BLOCKCAPT
        {-1, 23, 0, 0, 0, 0, 0, -1, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // OPTCAPT
        {-1, 24, 0, 0, 0, 0, 0, 28, -1, 29, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // VERBATIM
        {-1, 21, 0, 0, 0, 0, 0, 21, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, },
        // VERB
        {-1, 21, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State COMCAPT = new State(1);
        public final static State BLOCKCAPT = new State(2);
        public final static State OPTCAPT = new State(3);
        public final static State VERBATIM = new State(4);
        public final static State VERB = new State(5);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
