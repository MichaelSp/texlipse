/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.texparser.lexer;

import java.io.*;
import java.util.*;
import net.sourceforge.texlipse.texparser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERBATIM; break;
                                case 0: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERB; break;
                                case 0: state = State.VERB; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.BLOCKCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OPTCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new1(int line, int pos) { return new TCpart(line, pos); }
    Token new2(int line, int pos) { return new TCchapter(line, pos); }
    Token new3(int line, int pos) { return new TCsection(line, pos); }
    Token new4(int line, int pos) { return new TCssection(line, pos); }
    Token new5(int line, int pos) { return new TCsssection(line, pos); }
    Token new6(int line, int pos) { return new TCparagraph(line, pos); }
    Token new7(int line, int pos) { return new TCbib(line, pos); }
    Token new8(int line, int pos) { return new TCbibstyle(line, pos); }
    Token new9(int line, int pos) { return new TClabel(line, pos); }
    Token new10(String text, int line, int pos) { return new TCref(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TCcite(text, line, pos); }
    Token new12(int line, int pos) { return new TCbegin(line, pos); }
    Token new13(int line, int pos) { return new TCend(line, pos); }
    Token new14(int line, int pos) { return new TCinput(line, pos); }
    Token new15(int line, int pos) { return new TCinclude(line, pos); }
    Token new16(String text, int line, int pos) { return new TCnew(text, line, pos); }
    Token new17(int line, int pos) { return new TCrenew(line, pos); }
    Token new18(int line, int pos) { return new TCpindex(line, pos); }
    Token new19(String text, int line, int pos) { return new TBverbatim(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TEverbatim(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TVtext(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TCverb(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TArgument(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TOptargument(text, line, pos); }
    Token new25(int line, int pos) { return new TStar(line, pos); }
    Token new26(int line, int pos) { return new TLBrace(line, pos); }
    Token new27(int line, int pos) { return new TRBrace(line, pos); }
    Token new28(int line, int pos) { return new TLBracket(line, pos); }
    Token new29(int line, int pos) { return new TRBracket(line, pos); }
    Token new30(String text, int line, int pos) { return new TCword(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TCsymbol(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TCspace(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TWord(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TSkippedArea(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TTaskcomment(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TCommentline(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 90, 1}, {91, 91, 8}, {92, 92, 9}, {93, 93, 10}, {94, 122, 1}, {123, 123, 11}, {124, 124, 1}, {125, 125, 12}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 13}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 14}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 16}, {10, 10, 17}, {11, 12, 15}, {13, 13, 18}, {14, 31, 15}, {32, 32, 16}, {33, 33, 19}, {34, 34, 15}, {35, 35, 20}, {36, 90, 15}, {91, 93, 16}, {94, 122, 15}, {123, 123, 16}, {124, 124, 15}, {125, 125, 16}, {126, 65535, 15}, },
            {},
            {{0, 8, 21}, {9, 9, 22}, {10, 10, 23}, {11, 11, 21}, {12, 12, 24}, {13, 13, 25}, {14, 31, 21}, {32, 32, 26}, {33, 64, 21}, {65, 90, 27}, {91, 96, 21}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 27}, {101, 101, 30}, {102, 104, 27}, {105, 105, 31}, {106, 107, 27}, {108, 108, 32}, {109, 109, 27}, {110, 110, 33}, {111, 111, 27}, {112, 112, 34}, {113, 113, 27}, {114, 114, 35}, {115, 115, 36}, {116, 117, 27}, {118, 118, 37}, {119, 122, 27}, {123, 65535, 21}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 32, -9}, {33, 90, 15}, {91, 65535, -9}, },
            {{0, 9, 16}, {10, 10, 17}, {11, 12, 16}, {13, 13, 18}, {14, 65535, 16}, },
            {},
            {{10, 10, 38}, },
            {{0, 8, 39}, {9, 9, 40}, {10, 10, 41}, {11, 12, 39}, {13, 13, 42}, {14, 31, 39}, {32, 32, 40}, {33, 90, 39}, {91, 93, 40}, {94, 122, 39}, {123, 123, 40}, {124, 124, 39}, {125, 125, 40}, {126, 65535, 39}, },
            {{0, 32, -9}, {33, 34, 15}, {35, 35, 43}, {36, 65535, -9}, },
            {},
            {},
            {},
            {},
            {{10, 10, 44}, },
            {},
            {{65, 90, 27}, {97, 98, 27}, {99, 99, 45}, {100, 122, 27}, },
            {{65, 99, -29}, {100, 100, 27}, {101, 101, 46}, {102, 104, 27}, {105, 105, 47}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 103, 27}, {104, 104, 48}, {105, 105, 49}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 109, 27}, {110, 110, 50}, {111, 122, 27}, },
            {{65, 109, -32}, {110, 110, 51}, {111, 122, 27}, },
            {{65, 90, 27}, {97, 97, 52}, {98, 98, 27}, {99, 122, -29}, },
            {{65, 100, -30}, {101, 101, 53}, {102, 122, 27}, },
            {{65, 90, 27}, {97, 97, 54}, {98, 99, -34}, {100, 113, 27}, {114, 114, 55}, {115, 122, 27}, },
            {{65, 100, -30}, {101, 101, 56}, {102, 122, 27}, },
            {{65, 100, -30}, {101, 101, 57}, {102, 116, 27}, {117, 117, 58}, {118, 122, 27}, },
            {{65, 100, -30}, {101, 101, 59}, {102, 122, 27}, },
            {},
            {{0, 65535, -21}, },
            {{0, 9, 40}, {10, 10, 41}, {11, 12, 40}, {13, 13, 42}, {14, 65535, 40}, },
            {},
            {{10, 10, 60}, },
            {{0, 34, -22}, {35, 35, 61}, {36, 65535, -9}, },
            {},
            {{65, 99, -29}, {100, 104, 27}, {105, 105, 62}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 102, 27}, {103, 103, 63}, {104, 122, 27}, },
            {{65, 90, 27}, {97, 97, 27}, {98, 98, 64}, {99, 122, -29}, },
            {{65, 90, 27}, {97, 97, 65}, {98, 122, -34}, },
            {{65, 99, -29}, {100, 115, 27}, {116, 116, 66}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 100, 67}, {101, 122, 27}, },
            {{65, 98, -29}, {99, 99, 68}, {100, 111, 27}, {112, 112, 69}, {113, 122, 27}, },
            {{65, 97, -49}, {98, 98, 70}, {99, 122, -29}, },
            {{65, 99, -29}, {100, 118, 27}, {119, 119, 71}, {120, 120, 72}, {121, 122, 27}, },
            {{65, 102, -48}, {103, 103, 73}, {104, 113, 27}, {114, 114, 74}, {115, 122, 27}, },
            {{65, 104, -47}, {105, 105, 75}, {106, 110, 27}, {111, 111, 76}, {112, 122, 27}, },
            {{65, 99, -29}, {100, 101, 27}, {102, 102, 77}, {103, 109, 27}, {110, 110, 78}, {111, 122, 27}, },
            {{65, 98, -29}, {99, 99, 79}, {100, 122, 27}, },
            {{65, 97, -49}, {98, 98, 80}, {99, 122, -29}, },
            {{65, 99, -29}, {100, 113, 27}, {114, 114, 81}, {115, 122, 27}, },
            {},
            {{0, 8, 82}, {9, 9, 83}, {10, 10, 84}, {11, 12, 82}, {13, 13, 85}, {14, 31, 82}, {32, 32, 83}, {33, 36, 82}, {37, 37, 86}, {38, 90, 82}, {91, 93, 83}, {94, 122, 82}, {123, 123, 83}, {124, 124, 82}, {125, 125, 83}, {126, 65535, 82}, },
            {{65, 115, -51}, {116, 116, 87}, {117, 122, 27}, },
            {{65, 104, -47}, {105, 105, 88}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 107, 27}, {108, 108, 89}, {109, 122, 27}, },
            {{65, 99, -29}, {100, 111, 27}, {112, 112, 90}, {113, 122, 27}, },
            {{65, 100, -30}, {101, 101, 91}, {102, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 105, -47}, {106, 107, 27}, {108, 108, 92}, {109, 122, 27}, },
            {{65, 99, -29}, {100, 116, 27}, {117, 117, 93}, {118, 122, 27}, },
            {{65, 100, -30}, {101, 101, 94}, {102, 122, 27}, },
            {{65, 98, -29}, {99, 99, 95}, {100, 122, 27}, },
            {{65, 115, -51}, {116, 116, 96}, {117, 122, 27}, },
            {{65, 100, -30}, {101, 101, 97}, {102, 122, 27}, },
            {{65, 90, 27}, {97, 97, 98}, {98, 99, -34}, {100, 115, 27}, {116, 116, 99}, {117, 122, 27}, },
            {{65, 109, -32}, {110, 110, 100}, {111, 122, 27}, },
            {{65, 99, -29}, {100, 117, 27}, {118, 118, 101}, {119, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 100, -30}, {101, 101, 102}, {102, 122, 27}, },
            {{65, 105, -47}, {106, 115, 27}, {116, 116, 103}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 114, 27}, {115, 115, 104}, {116, 122, 27}, },
            {{65, 97, -49}, {98, 98, 105}, {99, 122, -29}, },
            {{0, 65535, -63}, },
            {{0, 9, 83}, {10, 10, 84}, {11, 12, 83}, {13, 13, 85}, {14, 36, 83}, {37, 37, 106}, {38, 65535, 83}, },
            {{0, 36, 107}, {37, 37, 108}, {38, 65535, 107}, },
            {{0, 9, 107}, {10, 10, 109}, {11, 36, 107}, {37, 65535, -86}, },
            {{0, 8, 110}, {9, 9, 111}, {10, 10, 112}, {11, 12, 110}, {13, 13, 113}, {14, 31, 110}, {32, 32, 111}, {33, 34, 110}, {35, 35, 114}, {36, 36, 110}, {37, 37, 86}, {38, 90, 110}, {91, 93, 111}, {94, 122, 110}, {123, 123, 111}, {124, 124, 110}, {125, 125, 111}, {126, 65535, 110}, },
            {{65, 100, -30}, {101, 101, 115}, {102, 122, 27}, },
            {{65, 109, -32}, {110, 110, 116}, {111, 122, 27}, },
            {{65, 104, -47}, {105, 105, 117}, {106, 122, 27}, },
            {{65, 115, -51}, {116, 116, 118}, {117, 122, 27}, },
            {{65, 90, 119}, {97, 98, 119}, {99, 99, 120}, {100, 122, 119}, },
            {{65, 116, -71}, {117, 117, 121}, {118, 122, 27}, },
            {{65, 115, -51}, {116, 116, 122}, {117, 122, 27}, },
            {{65, 107, -66}, {108, 108, 123}, {109, 122, 27}, },
            {{65, 105, -47}, {106, 110, 27}, {111, 111, 124}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 125}, {100, 122, 27}, },
            {{65, 113, -61}, {114, 114, 126}, {115, 122, 27}, },
            {{65, 102, -48}, {103, 103, 127}, {104, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 115, -51}, {116, 116, 128}, {117, 122, 27}, },
            {{65, 104, -47}, {105, 105, 129}, {106, 122, 27}, },
            {{65, 118, -55}, {119, 119, 130}, {120, 122, 27}, },
            {{65, 104, -47}, {105, 105, 131}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 132}, {102, 116, 27}, {117, 117, 133}, {118, 122, 27}, },
            {{42, 42, 134}, {65, 122, -29}, },
            {{0, 9, 111}, {10, 10, 112}, {11, 12, 111}, {13, 13, 113}, {14, 34, 111}, {35, 35, 135}, {36, 36, 111}, {37, 37, 106}, {38, 65535, 111}, },
            {{0, 65535, -86}, },
            {{0, 34, 136}, {35, 35, 137}, {36, 36, 136}, {37, 37, 108}, {38, 65535, 136}, },
            {{0, 65535, -86}, },
            {{0, 65535, -63}, },
            {{0, 65535, -85}, },
            {{0, 65535, -86}, },
            {{0, 65535, -87}, },
            {{0, 34, -22}, {35, 35, 138}, {36, 65535, -9}, },
            {{65, 122, -29}, },
            {{9, 9, 139}, {10, 10, 140}, {12, 12, 141}, {13, 13, 142}, {32, 32, 143}, {65, 122, -29}, {123, 123, 144}, },
            {{65, 99, -29}, {100, 110, 27}, {111, 111, 145}, {112, 122, 27}, },
            {{65, 100, -30}, {101, 101, 146}, {102, 122, 27}, },
            {{65, 122, -93}, },
            {{65, 99, -93}, {100, 104, 119}, {105, 105, 147}, {106, 122, 119}, },
            {{65, 99, -29}, {100, 100, 148}, {101, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 122, -29}, },
            {{65, 99, -29}, {100, 108, 27}, {109, 109, 149}, {110, 122, 27}, },
            {{65, 104, -47}, {105, 105, 150}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 151}, {102, 122, 27}, },
            {{65, 113, -61}, {114, 114, 152}, {115, 122, 27}, },
            {{65, 104, -47}, {105, 105, 153}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 100, 154}, {101, 122, 27}, },
            {{65, 98, -29}, {99, 99, 155}, {100, 122, 27}, },
            {{65, 110, -119}, {111, 111, 156}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 157}, {100, 122, 27}, },
            {{65, 97, -49}, {98, 98, 158}, {99, 122, -29}, },
            {},
            {{0, 13, -18}, {14, 34, 16}, {35, 35, 159}, {36, 65535, 16}, },
            {{0, 65535, -86}, },
            {{35, 35, 160}, },
            {{0, 34, -22}, {35, 35, 161}, {36, 65535, -9}, },
            {{9, 32, -118}, {123, 123, 144}, },
            {{9, 123, -141}, },
            {{9, 123, -141}, },
            {{9, 9, 139}, {10, 10, 162}, {12, 123, -141}, },
            {{9, 123, -141}, },
            {{118, 118, 163}, },
            {{65, 102, -48}, {103, 103, 164}, {104, 122, 27}, },
            {{65, 113, -61}, {114, 114, 165}, {115, 122, 27}, },
            {{65, 99, -93}, {100, 115, 119}, {116, 116, 166}, {117, 122, 119}, },
            {{65, 100, -30}, {101, 101, 167}, {102, 122, 27}, },
            {{65, 108, -126}, {109, 109, 168}, {110, 122, 27}, },
            {{65, 115, -51}, {116, 116, 169}, {117, 122, 27}, },
            {{65, 101, -58}, {102, 102, 170}, {103, 122, 27}, },
            {{65, 90, 27}, {97, 97, 171}, {98, 122, -34}, },
            {{65, 109, -32}, {110, 110, 172}, {111, 122, 27}, },
            {{65, 100, -30}, {101, 101, 173}, {102, 122, 27}, },
            {{65, 110, -97}, {111, 111, 174}, {112, 122, 27}, },
            {{65, 109, -32}, {110, 110, 175}, {111, 122, 27}, },
            {{65, 115, -81}, {116, 116, 176}, {117, 122, 27}, },
            {{65, 114, -82}, {115, 115, 177}, {116, 122, 27}, },
            {{0, 34, -137}, {35, 35, 178}, {36, 65535, 16}, },
            {{35, 35, 179}, },
            {{0, 8, 180}, {9, 9, 181}, {10, 10, 182}, {11, 12, 180}, {13, 13, 183}, {14, 31, 180}, {32, 32, 181}, {33, 90, 180}, {91, 93, 181}, {94, 122, 180}, {123, 123, 181}, {124, 124, 180}, {125, 125, 181}, {126, 65535, 180}, },
            {{9, 123, -141}, },
            {{101, 101, 184}, },
            {{65, 113, -61}, {114, 114, 185}, {115, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 99, -93}, {100, 100, 119}, {101, 101, 186}, {102, 122, 119}, },
            {{65, 122, -29}, },
            {{65, 90, 27}, {97, 97, 187}, {98, 122, -34}, },
            {{65, 100, -30}, {101, 101, 188}, {102, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 111, -67}, {112, 112, 189}, {113, 122, 27}, },
            {{65, 99, -29}, {100, 100, 190}, {101, 122, 27}, },
            {{65, 98, -29}, {99, 99, 191}, {100, 122, 27}, },
            {{65, 108, -126}, {109, 109, 192}, {110, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 104, -47}, {105, 105, 193}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 194}, {102, 122, 27}, },
            {{0, 9, 181}, {10, 10, 182}, {11, 12, 181}, {13, 13, 183}, {14, 65535, 181}, },
            {{0, 9, 195}, {10, 10, 196}, {11, 12, 195}, {13, 13, 197}, {14, 65535, 195}, },
            {{0, 65535, -163}, },
            {{0, 65535, -180}, },
            {},
            {{10, 10, 198}, },
            {{114, 114, 199}, },
            {{65, 90, 27}, {97, 97, 200}, {98, 122, -34}, },
            {{65, 122, -93}, },
            {{65, 109, -32}, {110, 110, 201}, {111, 122, 27}, },
            {{65, 90, 202}, {97, 98, 202}, {99, 99, 203}, {100, 122, 202}, },
            {{65, 103, -31}, {104, 104, 204}, {105, 122, 27}, },
            {{65, 100, -30}, {101, 101, 205}, {102, 122, 27}, },
            {{65, 110, -97}, {111, 111, 206}, {112, 122, 27}, },
            {{65, 108, -126}, {109, 109, 207}, {110, 122, 27}, },
            {{65, 110, -119}, {111, 111, 208}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 209}, {100, 122, 27}, },
            {{0, 65535, -181}, },
            {},
            {{10, 10, 210}, },
            {},
            {{98, 98, 211}, },
            {{65, 111, -67}, {112, 112, 212}, {113, 122, 27}, },
            {{65, 99, -29}, {100, 100, 213}, {101, 122, 27}, },
            {{65, 122, -190}, },
            {{65, 99, -190}, {100, 104, 202}, {105, 105, 214}, {106, 122, 202}, },
            {{65, 122, -29}, },
            {{65, 99, -29}, {100, 119, 27}, {120, 120, 215}, {121, 122, 27}, },
            {{65, 108, -126}, {109, 109, 216}, {110, 122, 27}, },
            {{65, 90, 27}, {97, 97, 217}, {98, 122, -34}, },
            {{65, 109, -32}, {110, 110, 218}, {111, 122, 27}, },
            {{65, 115, -81}, {116, 116, 219}, {117, 122, 27}, },
            {},
            {{97, 97, 220}, },
            {{65, 103, -31}, {104, 104, 221}, {105, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 99, -190}, {100, 115, 202}, {116, 116, 222}, {117, 122, 202}, },
            {{65, 122, -29}, },
            {{65, 108, -126}, {109, 109, 223}, {110, 122, 27}, },
            {{65, 109, -32}, {110, 110, 224}, {111, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 104, -47}, {105, 105, 225}, {106, 122, 27}, },
            {{116, 116, 226}, },
            {{65, 99, -29}, {100, 120, 27}, {121, 121, 227}, {122, 122, 27}, },
            {{65, 99, -190}, {100, 100, 202}, {101, 101, 228}, {102, 122, 202}, },
            {{65, 90, 27}, {97, 97, 229}, {98, 122, -34}, },
            {{65, 99, -29}, {100, 100, 230}, {101, 122, 27}, },
            {{65, 110, -119}, {111, 111, 231}, {112, 122, 27}, },
            {{105, 105, 232}, },
            {{65, 114, -82}, {115, 115, 233}, {116, 122, 27}, },
            {{65, 122, -190}, },
            {{65, 109, -32}, {110, 110, 234}, {111, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 109, -32}, {110, 110, 235}, {111, 122, 27}, },
            {{109, 109, 236}, },
            {{65, 115, -51}, {116, 116, 237}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 100, 238}, {101, 122, 27}, },
            {{65, 122, -29}, },
            {{42, 42, 239}, {125, 125, 240}, },
            {{65, 120, -223}, {121, 121, 241}, {122, 122, 27}, },
            {{65, 122, -29}, },
            {{125, 125, 242}, },
            {},
            {{65, 107, -66}, {108, 108, 243}, {109, 122, 27}, },
            {},
            {{65, 100, -30}, {101, 101, 244}, {102, 122, 27}, },
            {{65, 122, -29}, },
        }
        { // COMCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 41, 1}, {42, 42, 8}, {43, 90, 1}, {91, 91, 9}, {92, 92, 10}, {93, 93, 11}, {94, 122, 1}, {123, 123, 12}, {124, 124, 1}, {125, 125, 13}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 14}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 15}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 17}, {10, 10, 18}, {11, 12, 16}, {13, 13, 19}, {14, 31, 16}, {32, 32, 17}, {33, 33, 20}, {34, 34, 16}, {35, 35, 21}, {36, 90, 16}, {91, 93, 17}, {94, 122, 16}, {123, 123, 17}, {124, 124, 16}, {125, 125, 17}, {126, 65535, 16}, },
            {{0, 65535, -3}, },
            {},
            {{0, 8, 22}, {9, 9, 23}, {10, 10, 24}, {11, 11, 22}, {12, 12, 25}, {13, 13, 26}, {14, 31, 22}, {32, 32, 27}, {33, 64, 22}, {65, 90, 28}, {91, 96, 22}, {97, 97, 28}, {98, 98, 29}, {99, 99, 30}, {100, 100, 28}, {101, 101, 31}, {102, 104, 28}, {105, 105, 32}, {106, 107, 28}, {108, 108, 33}, {109, 109, 28}, {110, 110, 34}, {111, 111, 28}, {112, 112, 35}, {113, 113, 28}, {114, 114, 36}, {115, 115, 37}, {116, 117, 28}, {118, 118, 38}, {119, 122, 28}, {123, 65535, 22}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 32, -9}, {33, 90, 16}, {91, 65535, -9}, },
            {{0, 9, 17}, {10, 10, 18}, {11, 12, 17}, {13, 13, 19}, {14, 65535, 17}, },
            {},
            {{10, 10, 39}, },
            {{0, 8, 40}, {9, 9, 41}, {10, 10, 42}, {11, 12, 40}, {13, 13, 43}, {14, 31, 40}, {32, 32, 41}, {33, 90, 40}, {91, 93, 41}, {94, 122, 40}, {123, 123, 41}, {124, 124, 40}, {125, 125, 41}, {126, 65535, 40}, },
            {{0, 32, -9}, {33, 34, 16}, {35, 35, 44}, {36, 65535, -9}, },
            {},
            {},
            {},
            {},
            {{10, 10, 45}, },
            {},
            {{65, 90, 28}, {97, 98, 28}, {99, 99, 46}, {100, 122, 28}, },
            {{65, 99, -30}, {100, 100, 28}, {101, 101, 47}, {102, 104, 28}, {105, 105, 48}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 103, 28}, {104, 104, 49}, {105, 105, 50}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 109, 28}, {110, 110, 51}, {111, 122, 28}, },
            {{65, 109, -33}, {110, 110, 52}, {111, 122, 28}, },
            {{65, 90, 28}, {97, 97, 53}, {98, 98, 28}, {99, 122, -30}, },
            {{65, 100, -31}, {101, 101, 54}, {102, 122, 28}, },
            {{65, 90, 28}, {97, 97, 55}, {98, 99, -35}, {100, 113, 28}, {114, 114, 56}, {115, 122, 28}, },
            {{65, 100, -31}, {101, 101, 57}, {102, 122, 28}, },
            {{65, 100, -31}, {101, 101, 58}, {102, 116, 28}, {117, 117, 59}, {118, 122, 28}, },
            {{65, 100, -31}, {101, 101, 60}, {102, 122, 28}, },
            {},
            {{0, 65535, -22}, },
            {{0, 9, 41}, {10, 10, 42}, {11, 12, 41}, {13, 13, 43}, {14, 65535, 41}, },
            {},
            {{10, 10, 61}, },
            {{0, 34, -23}, {35, 35, 62}, {36, 65535, -9}, },
            {},
            {{65, 99, -30}, {100, 104, 28}, {105, 105, 63}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 102, 28}, {103, 103, 64}, {104, 122, 28}, },
            {{65, 90, 28}, {97, 97, 28}, {98, 98, 65}, {99, 122, -30}, },
            {{65, 90, 28}, {97, 97, 66}, {98, 122, -35}, },
            {{65, 99, -30}, {100, 115, 28}, {116, 116, 67}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 100, 68}, {101, 122, 28}, },
            {{65, 98, -30}, {99, 99, 69}, {100, 111, 28}, {112, 112, 70}, {113, 122, 28}, },
            {{65, 97, -50}, {98, 98, 71}, {99, 122, -30}, },
            {{65, 99, -30}, {100, 118, 28}, {119, 119, 72}, {120, 120, 73}, {121, 122, 28}, },
            {{65, 102, -49}, {103, 103, 74}, {104, 113, 28}, {114, 114, 75}, {115, 122, 28}, },
            {{65, 99, -30}, {100, 110, 28}, {111, 111, 76}, {112, 122, 28}, },
            {{65, 99, -30}, {100, 101, 28}, {102, 102, 77}, {103, 109, 28}, {110, 110, 78}, {111, 122, 28}, },
            {{65, 98, -30}, {99, 99, 79}, {100, 122, 28}, },
            {{65, 97, -50}, {98, 98, 80}, {99, 122, -30}, },
            {{65, 99, -30}, {100, 113, 28}, {114, 114, 81}, {115, 122, 28}, },
            {},
            {{0, 8, 82}, {9, 9, 83}, {10, 10, 84}, {11, 12, 82}, {13, 13, 85}, {14, 31, 82}, {32, 32, 83}, {33, 36, 82}, {37, 37, 86}, {38, 90, 82}, {91, 93, 83}, {94, 122, 82}, {123, 123, 83}, {124, 124, 82}, {125, 125, 83}, {126, 65535, 82}, },
            {{65, 115, -52}, {116, 116, 87}, {117, 122, 28}, },
            {{65, 104, -48}, {105, 105, 88}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 107, 28}, {108, 108, 89}, {109, 122, 28}, },
            {{65, 99, -30}, {100, 111, 28}, {112, 112, 90}, {113, 122, 28}, },
            {{65, 100, -31}, {101, 101, 91}, {102, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 105, -48}, {106, 107, 28}, {108, 108, 92}, {109, 122, 28}, },
            {{65, 99, -30}, {100, 116, 28}, {117, 117, 93}, {118, 122, 28}, },
            {{65, 100, -31}, {101, 101, 94}, {102, 122, 28}, },
            {{65, 98, -30}, {99, 99, 95}, {100, 122, 28}, },
            {{65, 115, -52}, {116, 116, 96}, {117, 122, 28}, },
            {{65, 100, -31}, {101, 101, 97}, {102, 122, 28}, },
            {{65, 90, 28}, {97, 97, 98}, {98, 99, -35}, {100, 115, 28}, {116, 116, 99}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 117, 28}, {118, 118, 100}, {119, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 100, -31}, {101, 101, 101}, {102, 122, 28}, },
            {{65, 105, -48}, {106, 115, 28}, {116, 116, 102}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 114, 28}, {115, 115, 103}, {116, 122, 28}, },
            {{65, 97, -50}, {98, 98, 104}, {99, 122, -30}, },
            {{0, 65535, -64}, },
            {{0, 9, 83}, {10, 10, 84}, {11, 12, 83}, {13, 13, 85}, {14, 36, 83}, {37, 37, 105}, {38, 65535, 83}, },
            {{0, 36, 106}, {37, 37, 107}, {38, 65535, 106}, },
            {{0, 9, 106}, {10, 10, 108}, {11, 36, 106}, {37, 65535, -86}, },
            {{0, 8, 109}, {9, 9, 110}, {10, 10, 111}, {11, 12, 109}, {13, 13, 112}, {14, 31, 109}, {32, 32, 110}, {33, 34, 109}, {35, 35, 113}, {36, 36, 109}, {37, 37, 86}, {38, 90, 109}, {91, 93, 110}, {94, 122, 109}, {123, 123, 110}, {124, 124, 109}, {125, 125, 110}, {126, 65535, 109}, },
            {{65, 100, -31}, {101, 101, 114}, {102, 122, 28}, },
            {{65, 109, -33}, {110, 110, 115}, {111, 122, 28}, },
            {{65, 104, -48}, {105, 105, 116}, {106, 122, 28}, },
            {{65, 115, -52}, {116, 116, 117}, {117, 122, 28}, },
            {{65, 90, 118}, {97, 98, 118}, {99, 99, 119}, {100, 122, 118}, },
            {{65, 116, -72}, {117, 117, 120}, {118, 122, 28}, },
            {{65, 115, -52}, {116, 116, 121}, {117, 122, 28}, },
            {{65, 107, -67}, {108, 108, 122}, {109, 122, 28}, },
            {{65, 105, -48}, {106, 110, 28}, {111, 111, 123}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 124}, {100, 122, 28}, },
            {{65, 113, -62}, {114, 114, 125}, {115, 122, 28}, },
            {{65, 102, -49}, {103, 103, 126}, {104, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 104, -48}, {105, 105, 127}, {106, 122, 28}, },
            {{65, 118, -56}, {119, 119, 128}, {120, 122, 28}, },
            {{65, 104, -48}, {105, 105, 129}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 130}, {102, 116, 28}, {117, 117, 131}, {118, 122, 28}, },
            {{42, 42, 132}, {65, 122, -30}, },
            {{0, 9, 110}, {10, 10, 111}, {11, 12, 110}, {13, 13, 112}, {14, 34, 110}, {35, 35, 133}, {36, 36, 110}, {37, 37, 105}, {38, 65535, 110}, },
            {{0, 65535, -86}, },
            {{0, 34, 134}, {35, 35, 135}, {36, 36, 134}, {37, 37, 107}, {38, 65535, 134}, },
            {{0, 65535, -86}, },
            {{0, 65535, -64}, },
            {{0, 65535, -85}, },
            {{0, 65535, -86}, },
            {{0, 65535, -87}, },
            {{0, 34, -23}, {35, 35, 136}, {36, 65535, -9}, },
            {{65, 122, -30}, },
            {{9, 9, 137}, {10, 10, 138}, {12, 12, 139}, {13, 13, 140}, {32, 32, 141}, {65, 122, -30}, {123, 123, 142}, },
            {{65, 110, -58}, {111, 111, 143}, {112, 122, 28}, },
            {{65, 100, -31}, {101, 101, 144}, {102, 122, 28}, },
            {{65, 122, -93}, },
            {{65, 99, -93}, {100, 104, 118}, {105, 105, 145}, {106, 122, 118}, },
            {{65, 99, -30}, {100, 100, 146}, {101, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 122, -30}, },
            {{65, 99, -30}, {100, 108, 28}, {109, 109, 147}, {110, 122, 28}, },
            {{65, 104, -48}, {105, 105, 148}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 149}, {102, 122, 28}, },
            {{65, 113, -62}, {114, 114, 150}, {115, 122, 28}, },
            {{65, 99, -30}, {100, 100, 151}, {101, 122, 28}, },
            {{65, 98, -30}, {99, 99, 152}, {100, 122, 28}, },
            {{65, 110, -58}, {111, 111, 153}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 154}, {100, 122, 28}, },
            {{65, 97, -50}, {98, 98, 155}, {99, 122, -30}, },
            {},
            {{0, 13, -19}, {14, 34, 17}, {35, 35, 156}, {36, 65535, 17}, },
            {{0, 65535, -86}, },
            {{35, 35, 157}, },
            {{0, 34, -23}, {35, 35, 158}, {36, 65535, -9}, },
            {{9, 32, -117}, {123, 123, 142}, },
            {{9, 123, -139}, },
            {{9, 123, -139}, },
            {{9, 9, 137}, {10, 10, 159}, {12, 123, -139}, },
            {{9, 123, -139}, },
            {{118, 118, 160}, },
            {{65, 102, -49}, {103, 103, 161}, {104, 122, 28}, },
            {{65, 113, -62}, {114, 114, 162}, {115, 122, 28}, },
            {{65, 99, -93}, {100, 115, 118}, {116, 116, 163}, {117, 122, 118}, },
            {{65, 100, -31}, {101, 101, 164}, {102, 122, 28}, },
            {{65, 108, -125}, {109, 109, 165}, {110, 122, 28}, },
            {{65, 115, -52}, {116, 116, 166}, {117, 122, 28}, },
            {{65, 101, -59}, {102, 102, 167}, {103, 122, 28}, },
            {{65, 90, 28}, {97, 97, 168}, {98, 122, -35}, },
            {{65, 100, -31}, {101, 101, 169}, {102, 122, 28}, },
            {{65, 110, -97}, {111, 111, 170}, {112, 122, 28}, },
            {{65, 109, -33}, {110, 110, 171}, {111, 122, 28}, },
            {{65, 115, -81}, {116, 116, 172}, {117, 122, 28}, },
            {{65, 114, -82}, {115, 115, 173}, {116, 122, 28}, },
            {{0, 34, -135}, {35, 35, 174}, {36, 65535, 17}, },
            {{35, 35, 175}, },
            {{0, 8, 176}, {9, 9, 177}, {10, 10, 178}, {11, 12, 176}, {13, 13, 179}, {14, 31, 176}, {32, 32, 177}, {33, 90, 176}, {91, 93, 177}, {94, 122, 176}, {123, 123, 177}, {124, 124, 176}, {125, 125, 177}, {126, 65535, 176}, },
            {{9, 123, -139}, },
            {{101, 101, 180}, },
            {{65, 113, -62}, {114, 114, 181}, {115, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 99, -93}, {100, 100, 118}, {101, 101, 182}, {102, 122, 118}, },
            {{65, 122, -30}, },
            {{65, 90, 28}, {97, 97, 183}, {98, 122, -35}, },
            {{65, 100, -31}, {101, 101, 184}, {102, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 111, -68}, {112, 112, 185}, {113, 122, 28}, },
            {{65, 98, -30}, {99, 99, 186}, {100, 122, 28}, },
            {{65, 108, -125}, {109, 109, 187}, {110, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 104, -48}, {105, 105, 188}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 189}, {102, 122, 28}, },
            {{0, 9, 177}, {10, 10, 178}, {11, 12, 177}, {13, 13, 179}, {14, 65535, 177}, },
            {{0, 9, 190}, {10, 10, 191}, {11, 12, 190}, {13, 13, 192}, {14, 65535, 190}, },
            {{0, 65535, -160}, },
            {{0, 65535, -176}, },
            {},
            {{10, 10, 193}, },
            {{114, 114, 194}, },
            {{65, 90, 28}, {97, 97, 195}, {98, 122, -35}, },
            {{65, 122, -93}, },
            {{65, 109, -33}, {110, 110, 196}, {111, 122, 28}, },
            {{65, 90, 197}, {97, 98, 197}, {99, 99, 198}, {100, 122, 197}, },
            {{65, 103, -32}, {104, 104, 199}, {105, 122, 28}, },
            {{65, 110, -97}, {111, 111, 200}, {112, 122, 28}, },
            {{65, 108, -125}, {109, 109, 201}, {110, 122, 28}, },
            {{65, 110, -58}, {111, 111, 202}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 203}, {100, 122, 28}, },
            {{0, 65535, -177}, },
            {},
            {{10, 10, 204}, },
            {},
            {{98, 98, 205}, },
            {{65, 111, -68}, {112, 112, 206}, {113, 122, 28}, },
            {{65, 99, -30}, {100, 100, 207}, {101, 122, 28}, },
            {{65, 122, -186}, },
            {{65, 99, -186}, {100, 104, 197}, {105, 105, 208}, {106, 122, 197}, },
            {{65, 122, -30}, },
            {{65, 108, -125}, {109, 109, 209}, {110, 122, 28}, },
            {{65, 90, 28}, {97, 97, 210}, {98, 122, -35}, },
            {{65, 109, -33}, {110, 110, 211}, {111, 122, 28}, },
            {{65, 115, -81}, {116, 116, 212}, {117, 122, 28}, },
            {},
            {{97, 97, 213}, },
            {{65, 103, -32}, {104, 104, 214}, {105, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 99, -186}, {100, 115, 197}, {116, 116, 215}, {117, 122, 197}, },
            {{65, 108, -125}, {109, 109, 216}, {110, 122, 28}, },
            {{65, 109, -33}, {110, 110, 217}, {111, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 104, -48}, {105, 105, 218}, {106, 122, 28}, },
            {{116, 116, 219}, },
            {{65, 99, -30}, {100, 120, 28}, {121, 121, 220}, {122, 122, 28}, },
            {{65, 99, -186}, {100, 100, 197}, {101, 101, 221}, {102, 122, 197}, },
            {{65, 90, 28}, {97, 97, 222}, {98, 122, -35}, },
            {{65, 99, -30}, {100, 100, 223}, {101, 122, 28}, },
            {{65, 110, -58}, {111, 111, 224}, {112, 122, 28}, },
            {{105, 105, 225}, },
            {{65, 114, -82}, {115, 115, 226}, {116, 122, 28}, },
            {{65, 122, -186}, },
            {{65, 109, -33}, {110, 110, 227}, {111, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 109, -33}, {110, 110, 228}, {111, 122, 28}, },
            {{109, 109, 229}, },
            {{65, 115, -52}, {116, 116, 230}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 100, 231}, {101, 122, 28}, },
            {{65, 122, -30}, },
            {{42, 42, 232}, {125, 125, 233}, },
            {{65, 120, -216}, {121, 121, 234}, {122, 122, 28}, },
            {{65, 122, -30}, },
            {{125, 125, 235}, },
            {},
            {{65, 107, -67}, {108, 108, 236}, {109, 122, 28}, },
            {},
            {{65, 100, -31}, {101, 101, 237}, {102, 122, 28}, },
            {{65, 122, -30}, },
        }
        { // BLOCKCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 122, 1}, {123, 123, 8}, {124, 124, 1}, {125, 125, 9}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 91, 1}, {93, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 10}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 91, -2}, {93, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 11}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 12}, {9, 9, 13}, {10, 10, 14}, {11, 11, 12}, {12, 12, 15}, {13, 13, 16}, {14, 31, 12}, {32, 32, 17}, {33, 64, 12}, {65, 90, 18}, {91, 96, 12}, {97, 122, 18}, {123, 65535, 12}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 19}, },
            {},
            {{65, 90, 18}, {97, 122, 18}, },
            {},
        }
        { // OPTCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 90, 1}, {91, 91, 7}, {92, 92, 8}, {93, 93, 9}, {94, 122, 1}, {123, 123, 10}, {124, 124, 1}, {125, 125, 11}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 12}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 90, -2}, {94, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 13}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 8, 14}, {9, 9, 15}, {10, 10, 16}, {11, 11, 14}, {12, 12, 17}, {13, 13, 18}, {14, 31, 14}, {32, 32, 19}, {33, 64, 14}, {65, 90, 20}, {91, 96, 14}, {97, 122, 20}, {123, 65535, 14}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 21}, },
            {},
            {{65, 90, 20}, {97, 122, 20}, },
            {},
        }
        { // VERBATIM
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 8}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 9}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{101, 101, 10}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{110, 110, 11}, },
            {{100, 100, 12}, },
            {{123, 123, 13}, },
            {{118, 118, 14}, },
            {{101, 101, 15}, },
            {{114, 114, 16}, },
            {{98, 98, 17}, },
            {{97, 97, 18}, },
            {{116, 116, 19}, },
            {{105, 105, 20}, },
            {{109, 109, 21}, },
            {{42, 42, 22}, {125, 125, 23}, },
            {{125, 125, 24}, },
            {},
            {},
        }
        { // VERB
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 7}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 8}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 33, 0, 0, 0, 0, 0, 33, 28, -1, 29, 26, 27, 0, 0, 33, 36, 36, 36, 33, 33, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 33, 35, 35, 35, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 33, 36, 36, 36, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 30, 22, 36, -1, -1, 36, 33, 36, 36, 36, 33, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 36, -1, -1, 33, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, -1, 33, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 30, 34, -1, 30, 16, 11, 18, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // COMCAPT
        {-1, 33, 0, 0, 0, 0, 0, 33, 25, 28, -1, 29, 26, 27, 0, 0, 33, 36, 36, 36, 33, 33, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 33, 35, 35, 35, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 33, 36, 36, 36, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 22, 36, -1, -1, 36, 33, 36, 36, 36, 33, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 36, -1, -1, 33, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, -1, 33, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 34, -1, 30, 16, 11, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // BLOCKCAPT
        {-1, 23, 0, 0, 0, 0, 0, -1, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // OPTCAPT
        {-1, 24, 0, 0, 0, 0, 0, 28, -1, 29, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // VERBATIM
        {-1, 21, 0, 0, 0, 0, 0, 21, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, },
        // VERB
        {-1, 21, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State COMCAPT = new State(1);
        public final static State BLOCKCAPT = new State(2);
        public final static State OPTCAPT = new State(3);
        public final static State VERBATIM = new State(4);
        public final static State VERB = new State(5);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
