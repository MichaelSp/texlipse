/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.texparser.lexer;

import java.io.*;
import java.util.*;
import net.sourceforge.texlipse.texparser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERBATIM; break;
                                case 0: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERB; break;
                                case 0: state = State.VERB; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.BLOCKCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OPTCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new1(int line, int pos) { return new TCpart(line, pos); }
    Token new2(int line, int pos) { return new TCchapter(line, pos); }
    Token new3(int line, int pos) { return new TCsection(line, pos); }
    Token new4(int line, int pos) { return new TCssection(line, pos); }
    Token new5(int line, int pos) { return new TCsssection(line, pos); }
    Token new6(int line, int pos) { return new TCparagraph(line, pos); }
    Token new7(int line, int pos) { return new TCbib(line, pos); }
    Token new8(int line, int pos) { return new TCbibstyle(line, pos); }
    Token new9(int line, int pos) { return new TClabel(line, pos); }
    Token new10(String text, int line, int pos) { return new TCref(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TCcite(text, line, pos); }
    Token new12(int line, int pos) { return new TCbegin(line, pos); }
    Token new13(int line, int pos) { return new TCend(line, pos); }
    Token new14(int line, int pos) { return new TCinput(line, pos); }
    Token new15(int line, int pos) { return new TCinclude(line, pos); }
    Token new16(String text, int line, int pos) { return new TCnew(text, line, pos); }
    Token new17(int line, int pos) { return new TCrenew(line, pos); }
    Token new18(int line, int pos) { return new TCpindex(line, pos); }
    Token new19(String text, int line, int pos) { return new TBverbatim(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TEverbatim(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TVtext(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TCverb(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TArgument(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TOptargument(text, line, pos); }
    Token new25(int line, int pos) { return new TStar(line, pos); }
    Token new26(int line, int pos) { return new TLBrace(line, pos); }
    Token new27(int line, int pos) { return new TRBrace(line, pos); }
    Token new28(int line, int pos) { return new TLBracket(line, pos); }
    Token new29(int line, int pos) { return new TRBracket(line, pos); }
    Token new30(String text, int line, int pos) { return new TCword(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TCsymbol(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TCspace(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TWord(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TSkippedArea(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TTaskcomment(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TCommentline(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 90, 1}, {91, 91, 8}, {92, 92, 9}, {93, 93, 10}, {94, 122, 1}, {123, 123, 11}, {124, 124, 1}, {125, 125, 12}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 13}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 14}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 16}, {10, 10, 17}, {11, 12, 15}, {13, 13, 18}, {14, 31, 15}, {32, 32, 16}, {33, 34, 15}, {35, 35, 19}, {36, 83, 15}, {84, 84, 20}, {85, 90, 15}, {91, 93, 21}, {94, 122, 15}, {123, 123, 21}, {124, 124, 15}, {125, 125, 21}, {126, 65535, 15}, },
            {},
            {{0, 8, 22}, {9, 9, 23}, {10, 10, 24}, {11, 11, 22}, {12, 12, 25}, {13, 13, 26}, {14, 31, 22}, {32, 32, 27}, {33, 64, 22}, {65, 90, 28}, {91, 96, 22}, {97, 97, 28}, {98, 98, 29}, {99, 99, 30}, {100, 100, 28}, {101, 101, 31}, {102, 104, 28}, {105, 105, 32}, {106, 107, 28}, {108, 108, 33}, {109, 109, 28}, {110, 110, 34}, {111, 111, 28}, {112, 112, 35}, {113, 113, 28}, {114, 114, 36}, {115, 115, 37}, {116, 117, 28}, {118, 118, 38}, {119, 122, 28}, {123, 65535, 22}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 21}, {10, 31, -9}, {32, 32, 21}, {33, 90, 15}, {91, 65535, -9}, },
            {{0, 8, 21}, {9, 10, -9}, {11, 12, 21}, {13, 13, 18}, {14, 31, 21}, {32, 32, 16}, {33, 83, 21}, {84, 84, 39}, {85, 65535, 21}, },
            {},
            {{10, 10, 40}, },
            {{0, 32, -17}, {33, 34, 15}, {35, 35, 41}, {36, 90, 15}, {91, 65535, -9}, },
            {{0, 32, -17}, {33, 78, 15}, {79, 79, 42}, {80, 90, 15}, {91, 65535, -9}, },
            {{0, 9, 21}, {10, 13, -18}, {14, 65535, 21}, },
            {},
            {},
            {},
            {},
            {{10, 10, 43}, },
            {},
            {{65, 90, 28}, {97, 98, 28}, {99, 99, 44}, {100, 122, 28}, },
            {{65, 99, -30}, {100, 100, 28}, {101, 101, 45}, {102, 104, 28}, {105, 105, 46}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 103, 28}, {104, 104, 47}, {105, 105, 48}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 109, 28}, {110, 110, 49}, {111, 122, 28}, },
            {{65, 109, -33}, {110, 110, 50}, {111, 122, 28}, },
            {{65, 90, 28}, {97, 97, 51}, {98, 98, 28}, {99, 122, -30}, },
            {{65, 100, -31}, {101, 101, 52}, {102, 122, 28}, },
            {{65, 90, 28}, {97, 97, 53}, {98, 99, -35}, {100, 113, 28}, {114, 114, 54}, {115, 122, 28}, },
            {{65, 100, -31}, {101, 101, 55}, {102, 122, 28}, },
            {{65, 100, -31}, {101, 101, 56}, {102, 116, 28}, {117, 117, 57}, {118, 122, 28}, },
            {{65, 100, -31}, {101, 101, 58}, {102, 122, 28}, },
            {{0, 13, -23}, {14, 78, 21}, {79, 79, 59}, {80, 65535, 21}, },
            {},
            {{0, 34, -21}, {35, 35, 60}, {36, 65535, -21}, },
            {{0, 32, -17}, {33, 67, 15}, {68, 68, 61}, {69, 90, 15}, {91, 65535, -9}, },
            {},
            {{65, 99, -30}, {100, 104, 28}, {105, 105, 62}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 102, 28}, {103, 103, 63}, {104, 122, 28}, },
            {{65, 90, 28}, {97, 97, 28}, {98, 98, 64}, {99, 122, -30}, },
            {{65, 90, 28}, {97, 97, 65}, {98, 122, -35}, },
            {{65, 99, -30}, {100, 115, 28}, {116, 116, 66}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 100, 67}, {101, 122, 28}, },
            {{65, 98, -30}, {99, 99, 68}, {100, 111, 28}, {112, 112, 69}, {113, 122, 28}, },
            {{65, 97, -48}, {98, 98, 70}, {99, 122, -30}, },
            {{65, 99, -30}, {100, 118, 28}, {119, 119, 71}, {120, 120, 72}, {121, 122, 28}, },
            {{65, 102, -47}, {103, 103, 73}, {104, 113, 28}, {114, 114, 74}, {115, 122, 28}, },
            {{65, 104, -46}, {105, 105, 75}, {106, 110, 28}, {111, 111, 76}, {112, 122, 28}, },
            {{65, 99, -30}, {100, 101, 28}, {102, 102, 77}, {103, 109, 28}, {110, 110, 78}, {111, 122, 28}, },
            {{65, 98, -30}, {99, 99, 79}, {100, 122, 28}, },
            {{65, 97, -48}, {98, 98, 80}, {99, 122, -30}, },
            {{65, 99, -30}, {100, 113, 28}, {114, 114, 81}, {115, 122, 28}, },
            {{0, 13, -23}, {14, 67, 21}, {68, 68, 82}, {69, 65535, 21}, },
            {{0, 8, 83}, {9, 9, 84}, {10, 10, 85}, {11, 12, 83}, {13, 13, 86}, {14, 31, 83}, {32, 32, 84}, {33, 36, 83}, {37, 37, 87}, {38, 90, 83}, {91, 93, 84}, {94, 122, 83}, {123, 123, 84}, {124, 124, 83}, {125, 125, 84}, {126, 65535, 83}, },
            {{0, 78, -22}, {79, 79, 88}, {80, 65535, -22}, },
            {{65, 115, -50}, {116, 116, 89}, {117, 122, 28}, },
            {{65, 104, -46}, {105, 105, 90}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 107, 28}, {108, 108, 91}, {109, 122, 28}, },
            {{65, 99, -30}, {100, 111, 28}, {112, 112, 92}, {113, 122, 28}, },
            {{65, 100, -31}, {101, 101, 93}, {102, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 105, -46}, {106, 107, 28}, {108, 108, 94}, {109, 122, 28}, },
            {{65, 99, -30}, {100, 116, 28}, {117, 117, 95}, {118, 122, 28}, },
            {{65, 100, -31}, {101, 101, 96}, {102, 122, 28}, },
            {{65, 98, -30}, {99, 99, 97}, {100, 122, 28}, },
            {{65, 115, -50}, {116, 116, 98}, {117, 122, 28}, },
            {{65, 100, -31}, {101, 101, 99}, {102, 122, 28}, },
            {{65, 90, 28}, {97, 97, 100}, {98, 99, -35}, {100, 115, 28}, {116, 116, 101}, {117, 122, 28}, },
            {{65, 109, -33}, {110, 110, 102}, {111, 122, 28}, },
            {{65, 99, -30}, {100, 117, 28}, {118, 118, 103}, {119, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 100, -31}, {101, 101, 104}, {102, 122, 28}, },
            {{65, 105, -46}, {106, 115, 28}, {116, 116, 105}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 114, 28}, {115, 115, 106}, {116, 122, 28}, },
            {{65, 97, -48}, {98, 98, 107}, {99, 122, -30}, },
            {{0, 78, -41}, {79, 79, 108}, {80, 65535, 21}, },
            {{0, 65535, -62}, },
            {{0, 9, 84}, {10, 10, 85}, {11, 12, 84}, {13, 13, 86}, {14, 36, 84}, {37, 37, 109}, {38, 65535, 84}, },
            {{0, 36, 110}, {37, 37, 111}, {38, 65535, 110}, },
            {{0, 9, 110}, {10, 10, 112}, {11, 36, 110}, {37, 65535, -87}, },
            {{0, 8, 113}, {9, 9, 114}, {10, 10, 115}, {11, 12, 113}, {13, 13, 116}, {14, 31, 113}, {32, 32, 114}, {33, 34, 113}, {35, 35, 117}, {36, 36, 113}, {37, 37, 87}, {38, 90, 113}, {91, 93, 114}, {94, 122, 113}, {123, 123, 114}, {124, 124, 113}, {125, 125, 114}, {126, 65535, 113}, },
            {{0, 8, 118}, {9, 9, 119}, {10, 10, 120}, {11, 12, 118}, {13, 13, 121}, {14, 31, 118}, {32, 32, 119}, {33, 90, 118}, {91, 93, 119}, {94, 122, 118}, {123, 123, 119}, {124, 124, 118}, {125, 125, 119}, {126, 65535, 118}, },
            {{65, 100, -31}, {101, 101, 122}, {102, 122, 28}, },
            {{65, 109, -33}, {110, 110, 123}, {111, 122, 28}, },
            {{65, 104, -46}, {105, 105, 124}, {106, 122, 28}, },
            {{65, 115, -50}, {116, 116, 125}, {117, 122, 28}, },
            {{65, 90, 126}, {97, 98, 126}, {99, 99, 127}, {100, 122, 126}, },
            {{65, 116, -71}, {117, 117, 128}, {118, 122, 28}, },
            {{65, 115, -50}, {116, 116, 129}, {117, 122, 28}, },
            {{65, 107, -66}, {108, 108, 130}, {109, 122, 28}, },
            {{65, 105, -46}, {106, 110, 28}, {111, 111, 131}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 132}, {100, 122, 28}, },
            {{65, 113, -60}, {114, 114, 133}, {115, 122, 28}, },
            {{65, 102, -47}, {103, 103, 134}, {104, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 115, -50}, {116, 116, 135}, {117, 122, 28}, },
            {{65, 104, -46}, {105, 105, 136}, {106, 122, 28}, },
            {{65, 118, -54}, {119, 119, 137}, {120, 122, 28}, },
            {{65, 104, -46}, {105, 105, 138}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 139}, {102, 116, 28}, {117, 117, 140}, {118, 122, 28}, },
            {{42, 42, 141}, {65, 122, -30}, },
            {{0, 9, 119}, {10, 10, 120}, {11, 12, 119}, {13, 13, 121}, {14, 65535, 119}, },
            {{0, 9, 114}, {10, 10, 115}, {11, 12, 114}, {13, 13, 116}, {14, 34, 114}, {35, 35, 142}, {36, 36, 114}, {37, 37, 109}, {38, 65535, 114}, },
            {{0, 65535, -87}, },
            {{0, 34, 143}, {35, 35, 144}, {36, 36, 143}, {37, 37, 111}, {38, 65535, 143}, },
            {{0, 65535, -87}, },
            {{0, 65535, -62}, },
            {{0, 65535, -86}, },
            {{0, 65535, -87}, },
            {{0, 65535, -88}, },
            {{0, 34, -21}, {35, 35, 145}, {36, 65535, -21}, },
            {{0, 65535, -90}, },
            {{0, 65535, -110}, },
            {},
            {{10, 10, 146}, },
            {{65, 122, -30}, },
            {{9, 9, 147}, {10, 10, 148}, {12, 12, 149}, {13, 13, 150}, {32, 32, 151}, {65, 122, -30}, {123, 123, 152}, },
            {{65, 99, -30}, {100, 110, 28}, {111, 111, 153}, {112, 122, 28}, },
            {{65, 100, -31}, {101, 101, 154}, {102, 122, 28}, },
            {{65, 122, -95}, },
            {{65, 99, -95}, {100, 104, 126}, {105, 105, 155}, {106, 122, 126}, },
            {{65, 99, -30}, {100, 100, 156}, {101, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 122, -30}, },
            {{65, 99, -30}, {100, 108, 28}, {109, 109, 157}, {110, 122, 28}, },
            {{65, 104, -46}, {105, 105, 158}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 159}, {102, 122, 28}, },
            {{65, 113, -60}, {114, 114, 160}, {115, 122, 28}, },
            {{65, 104, -46}, {105, 105, 161}, {106, 122, 28}, },
            {{65, 99, -30}, {100, 100, 162}, {101, 122, 28}, },
            {{65, 98, -30}, {99, 99, 163}, {100, 122, 28}, },
            {{65, 110, -126}, {111, 111, 164}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 165}, {100, 122, 28}, },
            {{65, 97, -48}, {98, 98, 166}, {99, 122, -30}, },
            {},
            {{0, 13, -23}, {14, 34, 21}, {35, 35, 167}, {36, 65535, 21}, },
            {{0, 65535, -87}, },
            {{35, 35, 168}, },
            {{0, 34, -21}, {35, 35, 169}, {36, 65535, -21}, },
            {},
            {{9, 32, -125}, {123, 123, 152}, },
            {{9, 123, -149}, },
            {{9, 123, -149}, },
            {{9, 9, 147}, {10, 10, 170}, {12, 123, -149}, },
            {{9, 123, -149}, },
            {{86, 86, 171}, {108, 108, 172}, {118, 118, 173}, },
            {{65, 102, -47}, {103, 103, 174}, {104, 122, 28}, },
            {{65, 113, -60}, {114, 114, 175}, {115, 122, 28}, },
            {{65, 99, -95}, {100, 115, 126}, {116, 116, 176}, {117, 122, 126}, },
            {{65, 100, -31}, {101, 101, 177}, {102, 122, 28}, },
            {{65, 108, -133}, {109, 109, 178}, {110, 122, 28}, },
            {{65, 115, -50}, {116, 116, 179}, {117, 122, 28}, },
            {{65, 101, -57}, {102, 102, 180}, {103, 122, 28}, },
            {{65, 90, 28}, {97, 97, 181}, {98, 122, -35}, },
            {{65, 109, -33}, {110, 110, 182}, {111, 122, 28}, },
            {{65, 100, -31}, {101, 101, 183}, {102, 122, 28}, },
            {{65, 110, -99}, {111, 111, 184}, {112, 122, 28}, },
            {{65, 109, -33}, {110, 110, 185}, {111, 122, 28}, },
            {{65, 115, -81}, {116, 116, 186}, {117, 122, 28}, },
            {{65, 114, -82}, {115, 115, 187}, {116, 122, 28}, },
            {{0, 34, -144}, {35, 35, 188}, {36, 65535, 21}, },
            {{35, 35, 189}, },
            {{0, 8, 190}, {9, 9, 191}, {10, 10, 192}, {11, 12, 190}, {13, 13, 193}, {14, 31, 190}, {32, 32, 191}, {33, 90, 190}, {91, 93, 191}, {94, 122, 190}, {123, 123, 191}, {124, 124, 190}, {125, 125, 191}, {126, 65535, 190}, },
            {{9, 123, -149}, },
            {{101, 101, 194}, },
            {{115, 115, 195}, },
            {{101, 101, 196}, },
            {{65, 113, -60}, {114, 114, 197}, {115, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 99, -95}, {100, 100, 126}, {101, 101, 198}, {102, 122, 126}, },
            {{65, 122, -30}, },
            {{65, 90, 28}, {97, 97, 199}, {98, 122, -35}, },
            {{65, 100, -31}, {101, 101, 200}, {102, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 111, -67}, {112, 112, 201}, {113, 122, 28}, },
            {{65, 99, -30}, {100, 100, 202}, {101, 122, 28}, },
            {{65, 98, -30}, {99, 99, 203}, {100, 122, 28}, },
            {{65, 108, -133}, {109, 109, 204}, {110, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 104, -46}, {105, 105, 205}, {106, 122, 28}, },
            {{65, 100, -31}, {101, 101, 206}, {102, 122, 28}, },
            {{0, 9, 191}, {10, 10, 192}, {11, 12, 191}, {13, 13, 193}, {14, 65535, 191}, },
            {{0, 9, 207}, {10, 10, 208}, {11, 12, 207}, {13, 13, 209}, {14, 65535, 207}, },
            {{0, 65535, -171}, },
            {{0, 65535, -190}, },
            {},
            {{10, 10, 210}, },
            {{114, 114, 211}, },
            {{116, 116, 212}, },
            {{114, 114, 213}, },
            {{65, 90, 28}, {97, 97, 214}, {98, 122, -35}, },
            {{65, 122, -95}, },
            {{65, 109, -33}, {110, 110, 215}, {111, 122, 28}, },
            {{65, 90, 216}, {97, 98, 216}, {99, 99, 217}, {100, 122, 216}, },
            {{65, 103, -32}, {104, 104, 218}, {105, 122, 28}, },
            {{65, 100, -31}, {101, 101, 219}, {102, 122, 28}, },
            {{65, 110, -99}, {111, 111, 220}, {112, 122, 28}, },
            {{65, 108, -133}, {109, 109, 221}, {110, 122, 28}, },
            {{65, 110, -126}, {111, 111, 222}, {112, 122, 28}, },
            {{65, 98, -30}, {99, 99, 223}, {100, 122, 28}, },
            {{0, 65535, -191}, },
            {},
            {{10, 10, 224}, },
            {},
            {{98, 98, 225}, },
            {{108, 108, 226}, },
            {{98, 98, 227}, },
            {{65, 111, -67}, {112, 112, 228}, {113, 122, 28}, },
            {{65, 99, -30}, {100, 100, 229}, {101, 122, 28}, },
            {{65, 122, -202}, },
            {{65, 99, -202}, {100, 104, 216}, {105, 105, 230}, {106, 122, 216}, },
            {{65, 122, -30}, },
            {{65, 99, -30}, {100, 119, 28}, {120, 120, 231}, {121, 122, 28}, },
            {{65, 108, -133}, {109, 109, 232}, {110, 122, 28}, },
            {{65, 90, 28}, {97, 97, 233}, {98, 122, -35}, },
            {{65, 109, -33}, {110, 110, 234}, {111, 122, 28}, },
            {{65, 115, -81}, {116, 116, 235}, {117, 122, 28}, },
            {},
            {{97, 97, 236}, },
            {{105, 105, 237}, },
            {{97, 97, 238}, },
            {{65, 103, -32}, {104, 104, 239}, {105, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 99, -202}, {100, 115, 216}, {116, 116, 240}, {117, 122, 216}, },
            {{65, 122, -30}, },
            {{65, 108, -133}, {109, 109, 241}, {110, 122, 28}, },
            {{65, 109, -33}, {110, 110, 242}, {111, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 104, -46}, {105, 105, 243}, {106, 122, 28}, },
            {{116, 116, 244}, },
            {{115, 115, 245}, },
            {{116, 116, 246}, },
            {{65, 99, -30}, {100, 120, 28}, {121, 121, 247}, {122, 122, 28}, },
            {{65, 99, -202}, {100, 100, 216}, {101, 101, 248}, {102, 122, 216}, },
            {{65, 90, 28}, {97, 97, 249}, {98, 122, -35}, },
            {{65, 99, -30}, {100, 100, 250}, {101, 122, 28}, },
            {{65, 110, -126}, {111, 111, 251}, {112, 122, 28}, },
            {{105, 105, 252}, },
            {{116, 116, 253}, },
            {{105, 105, 254}, },
            {{65, 114, -82}, {115, 115, 255}, {116, 122, 28}, },
            {{65, 122, -202}, },
            {{65, 109, -33}, {110, 110, 256}, {111, 122, 28}, },
            {{65, 122, -30}, },
            {{65, 109, -33}, {110, 110, 257}, {111, 122, 28}, },
            {{109, 109, 258}, },
            {{105, 105, 259}, },
            {{109, 109, 260}, },
            {{65, 115, -50}, {116, 116, 261}, {117, 122, 28}, },
            {{65, 99, -30}, {100, 100, 262}, {101, 122, 28}, },
            {{65, 122, -30}, },
            {{42, 42, 263}, {125, 125, 264}, },
            {{110, 110, 265}, },
            {{42, 125, -260}, },
            {{65, 120, -241}, {121, 121, 266}, {122, 122, 28}, },
            {{65, 122, -30}, },
            {{125, 125, 267}, },
            {},
            {{103, 103, 268}, },
            {{65, 107, -66}, {108, 108, 269}, {109, 122, 28}, },
            {},
            {{42, 125, -260}, },
            {{65, 100, -31}, {101, 101, 270}, {102, 122, 28}, },
            {{65, 122, -30}, },
        }
        { // COMCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 41, 1}, {42, 42, 8}, {43, 90, 1}, {91, 91, 9}, {92, 92, 10}, {93, 93, 11}, {94, 122, 1}, {123, 123, 12}, {124, 124, 1}, {125, 125, 13}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 14}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 15}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 17}, {10, 10, 18}, {11, 12, 16}, {13, 13, 19}, {14, 31, 16}, {32, 32, 17}, {33, 34, 16}, {35, 35, 20}, {36, 83, 16}, {84, 84, 21}, {85, 90, 16}, {91, 93, 22}, {94, 122, 16}, {123, 123, 22}, {124, 124, 16}, {125, 125, 22}, {126, 65535, 16}, },
            {{0, 65535, -3}, },
            {},
            {{0, 8, 23}, {9, 9, 24}, {10, 10, 25}, {11, 11, 23}, {12, 12, 26}, {13, 13, 27}, {14, 31, 23}, {32, 32, 28}, {33, 64, 23}, {65, 90, 29}, {91, 96, 23}, {97, 97, 29}, {98, 98, 30}, {99, 99, 31}, {100, 100, 29}, {101, 101, 32}, {102, 104, 29}, {105, 105, 33}, {106, 107, 29}, {108, 108, 34}, {109, 109, 29}, {110, 110, 35}, {111, 111, 29}, {112, 112, 36}, {113, 113, 29}, {114, 114, 37}, {115, 115, 38}, {116, 117, 29}, {118, 118, 39}, {119, 122, 29}, {123, 65535, 23}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 22}, {10, 31, -9}, {32, 32, 22}, {33, 90, 16}, {91, 65535, -9}, },
            {{0, 8, 22}, {9, 10, -9}, {11, 12, 22}, {13, 13, 19}, {14, 31, 22}, {32, 32, 17}, {33, 83, 22}, {84, 84, 40}, {85, 65535, 22}, },
            {},
            {{10, 10, 41}, },
            {{0, 32, -18}, {33, 34, 16}, {35, 35, 42}, {36, 90, 16}, {91, 65535, -9}, },
            {{0, 32, -18}, {33, 78, 16}, {79, 79, 43}, {80, 90, 16}, {91, 65535, -9}, },
            {{0, 9, 22}, {10, 13, -19}, {14, 65535, 22}, },
            {},
            {},
            {},
            {},
            {{10, 10, 44}, },
            {},
            {{65, 90, 29}, {97, 98, 29}, {99, 99, 45}, {100, 122, 29}, },
            {{65, 99, -31}, {100, 100, 29}, {101, 101, 46}, {102, 104, 29}, {105, 105, 47}, {106, 122, 29}, },
            {{65, 99, -31}, {100, 103, 29}, {104, 104, 48}, {105, 105, 49}, {106, 122, 29}, },
            {{65, 99, -31}, {100, 109, 29}, {110, 110, 50}, {111, 122, 29}, },
            {{65, 109, -34}, {110, 110, 51}, {111, 122, 29}, },
            {{65, 90, 29}, {97, 97, 52}, {98, 98, 29}, {99, 122, -31}, },
            {{65, 100, -32}, {101, 101, 53}, {102, 122, 29}, },
            {{65, 90, 29}, {97, 97, 54}, {98, 99, -36}, {100, 113, 29}, {114, 114, 55}, {115, 122, 29}, },
            {{65, 100, -32}, {101, 101, 56}, {102, 122, 29}, },
            {{65, 100, -32}, {101, 101, 57}, {102, 116, 29}, {117, 117, 58}, {118, 122, 29}, },
            {{65, 100, -32}, {101, 101, 59}, {102, 122, 29}, },
            {{0, 13, -24}, {14, 78, 22}, {79, 79, 60}, {80, 65535, 22}, },
            {},
            {{0, 34, -22}, {35, 35, 61}, {36, 65535, -22}, },
            {{0, 32, -18}, {33, 67, 16}, {68, 68, 62}, {69, 90, 16}, {91, 65535, -9}, },
            {},
            {{65, 99, -31}, {100, 104, 29}, {105, 105, 63}, {106, 122, 29}, },
            {{65, 99, -31}, {100, 102, 29}, {103, 103, 64}, {104, 122, 29}, },
            {{65, 90, 29}, {97, 97, 29}, {98, 98, 65}, {99, 122, -31}, },
            {{65, 90, 29}, {97, 97, 66}, {98, 122, -36}, },
            {{65, 99, -31}, {100, 115, 29}, {116, 116, 67}, {117, 122, 29}, },
            {{65, 99, -31}, {100, 100, 68}, {101, 122, 29}, },
            {{65, 98, -31}, {99, 99, 69}, {100, 111, 29}, {112, 112, 70}, {113, 122, 29}, },
            {{65, 97, -49}, {98, 98, 71}, {99, 122, -31}, },
            {{65, 99, -31}, {100, 118, 29}, {119, 119, 72}, {120, 120, 73}, {121, 122, 29}, },
            {{65, 102, -48}, {103, 103, 74}, {104, 113, 29}, {114, 114, 75}, {115, 122, 29}, },
            {{65, 99, -31}, {100, 110, 29}, {111, 111, 76}, {112, 122, 29}, },
            {{65, 99, -31}, {100, 101, 29}, {102, 102, 77}, {103, 109, 29}, {110, 110, 78}, {111, 122, 29}, },
            {{65, 98, -31}, {99, 99, 79}, {100, 122, 29}, },
            {{65, 97, -49}, {98, 98, 80}, {99, 122, -31}, },
            {{65, 99, -31}, {100, 113, 29}, {114, 114, 81}, {115, 122, 29}, },
            {{0, 13, -24}, {14, 67, 22}, {68, 68, 82}, {69, 65535, 22}, },
            {{0, 8, 83}, {9, 9, 84}, {10, 10, 85}, {11, 12, 83}, {13, 13, 86}, {14, 31, 83}, {32, 32, 84}, {33, 36, 83}, {37, 37, 87}, {38, 90, 83}, {91, 93, 84}, {94, 122, 83}, {123, 123, 84}, {124, 124, 83}, {125, 125, 84}, {126, 65535, 83}, },
            {{0, 78, -23}, {79, 79, 88}, {80, 65535, -23}, },
            {{65, 115, -51}, {116, 116, 89}, {117, 122, 29}, },
            {{65, 104, -47}, {105, 105, 90}, {106, 122, 29}, },
            {{65, 99, -31}, {100, 107, 29}, {108, 108, 91}, {109, 122, 29}, },
            {{65, 99, -31}, {100, 111, 29}, {112, 112, 92}, {113, 122, 29}, },
            {{65, 100, -32}, {101, 101, 93}, {102, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 105, -47}, {106, 107, 29}, {108, 108, 94}, {109, 122, 29}, },
            {{65, 99, -31}, {100, 116, 29}, {117, 117, 95}, {118, 122, 29}, },
            {{65, 100, -32}, {101, 101, 96}, {102, 122, 29}, },
            {{65, 98, -31}, {99, 99, 97}, {100, 122, 29}, },
            {{65, 115, -51}, {116, 116, 98}, {117, 122, 29}, },
            {{65, 100, -32}, {101, 101, 99}, {102, 122, 29}, },
            {{65, 90, 29}, {97, 97, 100}, {98, 99, -36}, {100, 115, 29}, {116, 116, 101}, {117, 122, 29}, },
            {{65, 99, -31}, {100, 117, 29}, {118, 118, 102}, {119, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 100, -32}, {101, 101, 103}, {102, 122, 29}, },
            {{65, 105, -47}, {106, 115, 29}, {116, 116, 104}, {117, 122, 29}, },
            {{65, 99, -31}, {100, 114, 29}, {115, 115, 105}, {116, 122, 29}, },
            {{65, 97, -49}, {98, 98, 106}, {99, 122, -31}, },
            {{0, 78, -42}, {79, 79, 107}, {80, 65535, 22}, },
            {{0, 65535, -63}, },
            {{0, 9, 84}, {10, 10, 85}, {11, 12, 84}, {13, 13, 86}, {14, 36, 84}, {37, 37, 108}, {38, 65535, 84}, },
            {{0, 36, 109}, {37, 37, 110}, {38, 65535, 109}, },
            {{0, 9, 109}, {10, 10, 111}, {11, 36, 109}, {37, 65535, -87}, },
            {{0, 8, 112}, {9, 9, 113}, {10, 10, 114}, {11, 12, 112}, {13, 13, 115}, {14, 31, 112}, {32, 32, 113}, {33, 34, 112}, {35, 35, 116}, {36, 36, 112}, {37, 37, 87}, {38, 90, 112}, {91, 93, 113}, {94, 122, 112}, {123, 123, 113}, {124, 124, 112}, {125, 125, 113}, {126, 65535, 112}, },
            {{0, 8, 117}, {9, 9, 118}, {10, 10, 119}, {11, 12, 117}, {13, 13, 120}, {14, 31, 117}, {32, 32, 118}, {33, 90, 117}, {91, 93, 118}, {94, 122, 117}, {123, 123, 118}, {124, 124, 117}, {125, 125, 118}, {126, 65535, 117}, },
            {{65, 100, -32}, {101, 101, 121}, {102, 122, 29}, },
            {{65, 109, -34}, {110, 110, 122}, {111, 122, 29}, },
            {{65, 104, -47}, {105, 105, 123}, {106, 122, 29}, },
            {{65, 115, -51}, {116, 116, 124}, {117, 122, 29}, },
            {{65, 90, 125}, {97, 98, 125}, {99, 99, 126}, {100, 122, 125}, },
            {{65, 116, -72}, {117, 117, 127}, {118, 122, 29}, },
            {{65, 115, -51}, {116, 116, 128}, {117, 122, 29}, },
            {{65, 107, -67}, {108, 108, 129}, {109, 122, 29}, },
            {{65, 105, -47}, {106, 110, 29}, {111, 111, 130}, {112, 122, 29}, },
            {{65, 98, -31}, {99, 99, 131}, {100, 122, 29}, },
            {{65, 113, -61}, {114, 114, 132}, {115, 122, 29}, },
            {{65, 102, -48}, {103, 103, 133}, {104, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 104, -47}, {105, 105, 134}, {106, 122, 29}, },
            {{65, 118, -55}, {119, 119, 135}, {120, 122, 29}, },
            {{65, 104, -47}, {105, 105, 136}, {106, 122, 29}, },
            {{65, 100, -32}, {101, 101, 137}, {102, 116, 29}, {117, 117, 138}, {118, 122, 29}, },
            {{42, 42, 139}, {65, 122, -31}, },
            {{0, 9, 118}, {10, 10, 119}, {11, 12, 118}, {13, 13, 120}, {14, 65535, 118}, },
            {{0, 9, 113}, {10, 10, 114}, {11, 12, 113}, {13, 13, 115}, {14, 34, 113}, {35, 35, 140}, {36, 36, 113}, {37, 37, 108}, {38, 65535, 113}, },
            {{0, 65535, -87}, },
            {{0, 34, 141}, {35, 35, 142}, {36, 36, 141}, {37, 37, 110}, {38, 65535, 141}, },
            {{0, 65535, -87}, },
            {{0, 65535, -63}, },
            {{0, 65535, -86}, },
            {{0, 65535, -87}, },
            {{0, 65535, -88}, },
            {{0, 34, -22}, {35, 35, 143}, {36, 65535, -22}, },
            {{0, 65535, -90}, },
            {{0, 65535, -109}, },
            {},
            {{10, 10, 144}, },
            {{65, 122, -31}, },
            {{9, 9, 145}, {10, 10, 146}, {12, 12, 147}, {13, 13, 148}, {32, 32, 149}, {65, 122, -31}, {123, 123, 150}, },
            {{65, 110, -57}, {111, 111, 151}, {112, 122, 29}, },
            {{65, 100, -32}, {101, 101, 152}, {102, 122, 29}, },
            {{65, 122, -95}, },
            {{65, 99, -95}, {100, 104, 125}, {105, 105, 153}, {106, 122, 125}, },
            {{65, 99, -31}, {100, 100, 154}, {101, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 122, -31}, },
            {{65, 99, -31}, {100, 108, 29}, {109, 109, 155}, {110, 122, 29}, },
            {{65, 104, -47}, {105, 105, 156}, {106, 122, 29}, },
            {{65, 100, -32}, {101, 101, 157}, {102, 122, 29}, },
            {{65, 113, -61}, {114, 114, 158}, {115, 122, 29}, },
            {{65, 99, -31}, {100, 100, 159}, {101, 122, 29}, },
            {{65, 98, -31}, {99, 99, 160}, {100, 122, 29}, },
            {{65, 110, -57}, {111, 111, 161}, {112, 122, 29}, },
            {{65, 98, -31}, {99, 99, 162}, {100, 122, 29}, },
            {{65, 97, -49}, {98, 98, 163}, {99, 122, -31}, },
            {},
            {{0, 13, -24}, {14, 34, 22}, {35, 35, 164}, {36, 65535, 22}, },
            {{0, 65535, -87}, },
            {{35, 35, 165}, },
            {{0, 34, -22}, {35, 35, 166}, {36, 65535, -22}, },
            {},
            {{9, 32, -124}, {123, 123, 150}, },
            {{9, 123, -147}, },
            {{9, 123, -147}, },
            {{9, 9, 145}, {10, 10, 167}, {12, 123, -147}, },
            {{9, 123, -147}, },
            {{86, 86, 168}, {108, 108, 169}, {118, 118, 170}, },
            {{65, 102, -48}, {103, 103, 171}, {104, 122, 29}, },
            {{65, 113, -61}, {114, 114, 172}, {115, 122, 29}, },
            {{65, 99, -95}, {100, 115, 125}, {116, 116, 173}, {117, 122, 125}, },
            {{65, 100, -32}, {101, 101, 174}, {102, 122, 29}, },
            {{65, 108, -132}, {109, 109, 175}, {110, 122, 29}, },
            {{65, 115, -51}, {116, 116, 176}, {117, 122, 29}, },
            {{65, 101, -58}, {102, 102, 177}, {103, 122, 29}, },
            {{65, 90, 29}, {97, 97, 178}, {98, 122, -36}, },
            {{65, 100, -32}, {101, 101, 179}, {102, 122, 29}, },
            {{65, 110, -99}, {111, 111, 180}, {112, 122, 29}, },
            {{65, 109, -34}, {110, 110, 181}, {111, 122, 29}, },
            {{65, 115, -81}, {116, 116, 182}, {117, 122, 29}, },
            {{65, 114, -82}, {115, 115, 183}, {116, 122, 29}, },
            {{0, 34, -142}, {35, 35, 184}, {36, 65535, 22}, },
            {{35, 35, 185}, },
            {{0, 8, 186}, {9, 9, 187}, {10, 10, 188}, {11, 12, 186}, {13, 13, 189}, {14, 31, 186}, {32, 32, 187}, {33, 90, 186}, {91, 93, 187}, {94, 122, 186}, {123, 123, 187}, {124, 124, 186}, {125, 125, 187}, {126, 65535, 186}, },
            {{9, 123, -147}, },
            {{101, 101, 190}, },
            {{115, 115, 191}, },
            {{101, 101, 192}, },
            {{65, 113, -61}, {114, 114, 193}, {115, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 99, -95}, {100, 100, 125}, {101, 101, 194}, {102, 122, 125}, },
            {{65, 122, -31}, },
            {{65, 90, 29}, {97, 97, 195}, {98, 122, -36}, },
            {{65, 100, -32}, {101, 101, 196}, {102, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 111, -68}, {112, 112, 197}, {113, 122, 29}, },
            {{65, 98, -31}, {99, 99, 198}, {100, 122, 29}, },
            {{65, 108, -132}, {109, 109, 199}, {110, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 104, -47}, {105, 105, 200}, {106, 122, 29}, },
            {{65, 100, -32}, {101, 101, 201}, {102, 122, 29}, },
            {{0, 9, 187}, {10, 10, 188}, {11, 12, 187}, {13, 13, 189}, {14, 65535, 187}, },
            {{0, 9, 202}, {10, 10, 203}, {11, 12, 202}, {13, 13, 204}, {14, 65535, 202}, },
            {{0, 65535, -168}, },
            {{0, 65535, -186}, },
            {},
            {{10, 10, 205}, },
            {{114, 114, 206}, },
            {{116, 116, 207}, },
            {{114, 114, 208}, },
            {{65, 90, 29}, {97, 97, 209}, {98, 122, -36}, },
            {{65, 122, -95}, },
            {{65, 109, -34}, {110, 110, 210}, {111, 122, 29}, },
            {{65, 90, 211}, {97, 98, 211}, {99, 99, 212}, {100, 122, 211}, },
            {{65, 103, -33}, {104, 104, 213}, {105, 122, 29}, },
            {{65, 110, -99}, {111, 111, 214}, {112, 122, 29}, },
            {{65, 108, -132}, {109, 109, 215}, {110, 122, 29}, },
            {{65, 110, -57}, {111, 111, 216}, {112, 122, 29}, },
            {{65, 98, -31}, {99, 99, 217}, {100, 122, 29}, },
            {{0, 65535, -187}, },
            {},
            {{10, 10, 218}, },
            {},
            {{98, 98, 219}, },
            {{108, 108, 220}, },
            {{98, 98, 221}, },
            {{65, 111, -68}, {112, 112, 222}, {113, 122, 29}, },
            {{65, 99, -31}, {100, 100, 223}, {101, 122, 29}, },
            {{65, 122, -198}, },
            {{65, 99, -198}, {100, 104, 211}, {105, 105, 224}, {106, 122, 211}, },
            {{65, 122, -31}, },
            {{65, 108, -132}, {109, 109, 225}, {110, 122, 29}, },
            {{65, 90, 29}, {97, 97, 226}, {98, 122, -36}, },
            {{65, 109, -34}, {110, 110, 227}, {111, 122, 29}, },
            {{65, 115, -81}, {116, 116, 228}, {117, 122, 29}, },
            {},
            {{97, 97, 229}, },
            {{105, 105, 230}, },
            {{97, 97, 231}, },
            {{65, 103, -33}, {104, 104, 232}, {105, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 99, -198}, {100, 115, 211}, {116, 116, 233}, {117, 122, 211}, },
            {{65, 108, -132}, {109, 109, 234}, {110, 122, 29}, },
            {{65, 109, -34}, {110, 110, 235}, {111, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 104, -47}, {105, 105, 236}, {106, 122, 29}, },
            {{116, 116, 237}, },
            {{115, 115, 238}, },
            {{116, 116, 239}, },
            {{65, 99, -31}, {100, 120, 29}, {121, 121, 240}, {122, 122, 29}, },
            {{65, 99, -198}, {100, 100, 211}, {101, 101, 241}, {102, 122, 211}, },
            {{65, 90, 29}, {97, 97, 242}, {98, 122, -36}, },
            {{65, 99, -31}, {100, 100, 243}, {101, 122, 29}, },
            {{65, 110, -57}, {111, 111, 244}, {112, 122, 29}, },
            {{105, 105, 245}, },
            {{116, 116, 246}, },
            {{105, 105, 247}, },
            {{65, 114, -82}, {115, 115, 248}, {116, 122, 29}, },
            {{65, 122, -198}, },
            {{65, 109, -34}, {110, 110, 249}, {111, 122, 29}, },
            {{65, 122, -31}, },
            {{65, 109, -34}, {110, 110, 250}, {111, 122, 29}, },
            {{109, 109, 251}, },
            {{105, 105, 252}, },
            {{109, 109, 253}, },
            {{65, 115, -51}, {116, 116, 254}, {117, 122, 29}, },
            {{65, 99, -31}, {100, 100, 255}, {101, 122, 29}, },
            {{65, 122, -31}, },
            {{42, 42, 256}, {125, 125, 257}, },
            {{110, 110, 258}, },
            {{42, 125, -253}, },
            {{65, 120, -234}, {121, 121, 259}, {122, 122, 29}, },
            {{65, 122, -31}, },
            {{125, 125, 260}, },
            {},
            {{103, 103, 261}, },
            {{65, 107, -67}, {108, 108, 262}, {109, 122, 29}, },
            {},
            {{42, 125, -253}, },
            {{65, 100, -32}, {101, 101, 263}, {102, 122, 29}, },
            {{65, 122, -31}, },
        }
        { // BLOCKCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 122, 1}, {123, 123, 8}, {124, 124, 1}, {125, 125, 9}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 91, 1}, {93, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 10}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 91, -2}, {93, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 11}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 12}, {9, 9, 13}, {10, 10, 14}, {11, 11, 12}, {12, 12, 15}, {13, 13, 16}, {14, 31, 12}, {32, 32, 17}, {33, 64, 12}, {65, 90, 18}, {91, 96, 12}, {97, 122, 18}, {123, 65535, 12}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 19}, },
            {},
            {{65, 90, 18}, {97, 122, 18}, },
            {},
        }
        { // OPTCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 90, 1}, {91, 91, 7}, {92, 92, 8}, {93, 93, 9}, {94, 122, 1}, {123, 123, 10}, {124, 124, 1}, {125, 125, 11}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 12}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 90, -2}, {94, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 13}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 8, 14}, {9, 9, 15}, {10, 10, 16}, {11, 11, 14}, {12, 12, 17}, {13, 13, 18}, {14, 31, 14}, {32, 32, 19}, {33, 64, 14}, {65, 90, 20}, {91, 96, 14}, {97, 122, 20}, {123, 65535, 14}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 21}, },
            {},
            {{65, 90, 20}, {97, 122, 20}, },
            {},
        }
        { // VERBATIM
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 8}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 9}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{101, 101, 10}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{110, 110, 11}, },
            {{100, 100, 12}, },
            {{123, 123, 13}, },
            {{86, 86, 14}, {108, 108, 15}, {118, 118, 16}, },
            {{101, 101, 17}, },
            {{115, 115, 18}, },
            {{101, 101, 19}, },
            {{114, 114, 20}, },
            {{116, 116, 21}, },
            {{114, 114, 22}, },
            {{98, 98, 23}, },
            {{108, 108, 24}, },
            {{98, 98, 25}, },
            {{97, 97, 26}, },
            {{105, 105, 27}, },
            {{97, 97, 28}, },
            {{116, 116, 29}, },
            {{115, 115, 30}, },
            {{116, 116, 31}, },
            {{105, 105, 32}, },
            {{116, 116, 33}, },
            {{105, 105, 34}, },
            {{109, 109, 35}, },
            {{105, 105, 36}, },
            {{109, 109, 37}, },
            {{42, 42, 38}, {125, 125, 39}, },
            {{110, 110, 40}, },
            {{42, 125, -37}, },
            {{125, 125, 41}, },
            {},
            {{103, 103, 42}, },
            {},
            {{42, 125, -37}, },
        }
        { // VERB
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 7}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 8}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 33, 0, 0, 0, 0, 0, 33, 28, -1, 29, 26, 27, 0, 0, 33, 36, 36, 36, 33, 33, 36, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 36, 33, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 33, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 36, 33, 36, 36, 36, 33, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 30, 22, 35, 36, -1, -1, 36, 33, 36, 36, 36, 33, 33, 35, 35, 35, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 36, -1, -1, 33, 35, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, -1, 33, -1, -1, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, -1, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, -1, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 30, 34, -1, -1, -1, 30, 16, 11, 18, 30, 30, 4, 30, -1, -1, -1, 30, 11, 30, 30, 30, -1, -1, -1, 7, 11, 30, 17, 30, -1, -1, -1, 30, 30, 5, -1, -1, -1, 30, 16, -1, 19, -1, 30, 19, -1, 30, 8, },
        // COMCAPT
        {-1, 33, 0, 0, 0, 0, 0, 33, 25, 28, -1, 29, 26, 27, 0, 0, 33, 36, 36, 36, 33, 33, 36, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 36, 33, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, 33, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 36, 33, 36, 36, 36, 33, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 22, 35, 36, -1, -1, 36, 33, 36, 36, 36, 33, 33, 35, 35, 35, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 36, -1, -1, 33, 35, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 36, -1, 33, -1, -1, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, -1, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, -1, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 34, -1, -1, -1, 30, 16, 11, 30, 30, 4, 30, -1, -1, -1, 30, 11, 30, 30, 30, -1, -1, -1, 7, 11, 30, 17, 30, -1, -1, -1, 30, 30, 5, -1, -1, -1, 30, 16, -1, 19, -1, 30, 19, -1, 30, 8, },
        // BLOCKCAPT
        {-1, 23, 0, 0, 0, 0, 0, -1, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // OPTCAPT
        {-1, 24, 0, 0, 0, 0, 0, 28, -1, 29, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // VERBATIM
        {-1, 21, 0, 0, 0, 0, 0, 21, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, 20, -1, },
        // VERB
        {-1, 21, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State COMCAPT = new State(1);
        public final static State BLOCKCAPT = new State(2);
        public final static State OPTCAPT = new State(3);
        public final static State VERBATIM = new State(4);
        public final static State VERB = new State(5);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
