/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sourceforge.texlipse.texparser.lexer;

import java.io.*;
import java.util.*;
import net.sourceforge.texlipse.texparser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.NORMAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERBATIM; break;
                                case 0: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 4: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 5: state = State.VERB; break;
                                case 4: state = State.VERBATIM; break;
                            }
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.VERB; break;
                                case 0: state = State.VERB; break;
                            }
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                            }
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                            }
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.BLOCKCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.OPTCAPT; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.COMCAPT; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 2: state = State.BLOCKCAPT; break;
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                                case 3: state = State.OPTCAPT; break;
                            }
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.NORMAL; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch(state.id())
                            {
                                case 1: state = State.COMCAPT; break;
                                case 0: state = State.NORMAL; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new1(int line, int pos) { return new TCpart(line, pos); }
    Token new2(int line, int pos) { return new TCchapter(line, pos); }
    Token new3(int line, int pos) { return new TCsection(line, pos); }
    Token new4(int line, int pos) { return new TCssection(line, pos); }
    Token new5(int line, int pos) { return new TCsssection(line, pos); }
    Token new6(int line, int pos) { return new TCparagraph(line, pos); }
    Token new7(int line, int pos) { return new TCbib(line, pos); }
    Token new8(int line, int pos) { return new TCbibstyle(line, pos); }
    Token new9(int line, int pos) { return new TClabel(line, pos); }
    Token new10(String text, int line, int pos) { return new TCref(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TCcite(text, line, pos); }
    Token new12(int line, int pos) { return new TCbegin(line, pos); }
    Token new13(int line, int pos) { return new TCend(line, pos); }
    Token new14(int line, int pos) { return new TCinput(line, pos); }
    Token new15(int line, int pos) { return new TCinclude(line, pos); }
    Token new16(String text, int line, int pos) { return new TCnew(text, line, pos); }
    Token new17(int line, int pos) { return new TCrenew(line, pos); }
    Token new18(int line, int pos) { return new TCpindex(line, pos); }
    Token new19(String text, int line, int pos) { return new TBverbatim(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TEverbatim(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TVtext(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TCverb(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TArgument(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TOptargument(text, line, pos); }
    Token new25(int line, int pos) { return new TStar(line, pos); }
    Token new26(int line, int pos) { return new TLBrace(line, pos); }
    Token new27(int line, int pos) { return new TRBrace(line, pos); }
    Token new28(int line, int pos) { return new TLBracket(line, pos); }
    Token new29(int line, int pos) { return new TRBracket(line, pos); }
    Token new30(String text, int line, int pos) { return new TCword(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TCsymbol(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TCspace(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TWord(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TSkippedArea(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TCommentline(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // NORMAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 90, 1}, {91, 91, 8}, {92, 92, 9}, {93, 93, 10}, {94, 122, 1}, {123, 123, 11}, {124, 124, 1}, {125, 125, 12}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 13}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 14}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 15}, {9, 9, 16}, {10, 10, 17}, {11, 12, 15}, {13, 13, 18}, {14, 31, 15}, {32, 32, 16}, {33, 34, 15}, {35, 35, 19}, {36, 90, 15}, {91, 93, 16}, {94, 122, 15}, {123, 123, 16}, {124, 124, 15}, {125, 125, 16}, {126, 65535, 15}, },
            {},
            {{0, 8, 20}, {9, 9, 21}, {10, 10, 22}, {11, 11, 20}, {12, 12, 23}, {13, 13, 24}, {14, 31, 20}, {32, 32, 25}, {33, 64, 20}, {65, 90, 26}, {91, 96, 20}, {97, 97, 26}, {98, 98, 27}, {99, 99, 28}, {100, 100, 26}, {101, 101, 29}, {102, 104, 26}, {105, 105, 30}, {106, 107, 26}, {108, 108, 31}, {109, 109, 26}, {110, 110, 32}, {111, 111, 26}, {112, 112, 33}, {113, 113, 26}, {114, 114, 34}, {115, 115, 35}, {116, 117, 26}, {118, 118, 36}, {119, 122, 26}, {123, 65535, 20}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 32, -9}, {33, 90, 15}, {91, 65535, -9}, },
            {{0, 9, 16}, {10, 10, 17}, {11, 12, 16}, {13, 13, 18}, {14, 65535, 16}, },
            {},
            {{10, 10, 37}, },
            {{0, 34, -9}, {35, 35, 38}, {36, 65535, -9}, },
            {},
            {},
            {},
            {},
            {{10, 10, 39}, },
            {},
            {{65, 90, 26}, {97, 98, 26}, {99, 99, 40}, {100, 122, 26}, },
            {{65, 99, -28}, {100, 100, 26}, {101, 101, 41}, {102, 104, 26}, {105, 105, 42}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 103, 26}, {104, 104, 43}, {105, 105, 44}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 109, 26}, {110, 110, 45}, {111, 122, 26}, },
            {{65, 109, -31}, {110, 110, 46}, {111, 122, 26}, },
            {{65, 90, 26}, {97, 97, 47}, {98, 98, 26}, {99, 122, -28}, },
            {{65, 100, -29}, {101, 101, 48}, {102, 122, 26}, },
            {{65, 90, 26}, {97, 97, 49}, {98, 99, -33}, {100, 113, 26}, {114, 114, 50}, {115, 122, 26}, },
            {{65, 100, -29}, {101, 101, 51}, {102, 122, 26}, },
            {{65, 100, -29}, {101, 101, 52}, {102, 116, 26}, {117, 117, 53}, {118, 122, 26}, },
            {{65, 100, -29}, {101, 101, 54}, {102, 122, 26}, },
            {},
            {{0, 34, -9}, {35, 35, 55}, {36, 65535, -9}, },
            {},
            {{65, 99, -28}, {100, 104, 26}, {105, 105, 56}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 102, 26}, {103, 103, 57}, {104, 122, 26}, },
            {{65, 90, 26}, {97, 97, 26}, {98, 98, 58}, {99, 122, -28}, },
            {{65, 90, 26}, {97, 97, 59}, {98, 122, -33}, },
            {{65, 99, -28}, {100, 115, 26}, {116, 116, 60}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 100, 61}, {101, 122, 26}, },
            {{65, 98, -28}, {99, 99, 62}, {100, 111, 26}, {112, 112, 63}, {113, 122, 26}, },
            {{65, 97, -44}, {98, 98, 64}, {99, 122, -28}, },
            {{65, 99, -28}, {100, 118, 26}, {119, 119, 65}, {120, 120, 66}, {121, 122, 26}, },
            {{65, 102, -43}, {103, 103, 67}, {104, 113, 26}, {114, 114, 68}, {115, 122, 26}, },
            {{65, 104, -42}, {105, 105, 69}, {106, 110, 26}, {111, 111, 70}, {112, 122, 26}, },
            {{65, 99, -28}, {100, 101, 26}, {102, 102, 71}, {103, 109, 26}, {110, 110, 72}, {111, 122, 26}, },
            {{65, 98, -28}, {99, 99, 73}, {100, 122, 26}, },
            {{65, 97, -44}, {98, 98, 74}, {99, 122, -28}, },
            {{65, 99, -28}, {100, 113, 26}, {114, 114, 75}, {115, 122, 26}, },
            {{0, 8, 76}, {9, 9, 77}, {10, 10, 78}, {11, 12, 76}, {13, 13, 79}, {14, 31, 76}, {32, 32, 77}, {33, 36, 76}, {37, 37, 80}, {38, 90, 76}, {91, 93, 77}, {94, 122, 76}, {123, 123, 77}, {124, 124, 76}, {125, 125, 77}, {126, 65535, 76}, },
            {{65, 115, -46}, {116, 116, 81}, {117, 122, 26}, },
            {{65, 104, -42}, {105, 105, 82}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 107, 26}, {108, 108, 83}, {109, 122, 26}, },
            {{65, 99, -28}, {100, 111, 26}, {112, 112, 84}, {113, 122, 26}, },
            {{65, 100, -29}, {101, 101, 85}, {102, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 105, -42}, {106, 107, 26}, {108, 108, 86}, {109, 122, 26}, },
            {{65, 99, -28}, {100, 116, 26}, {117, 117, 87}, {118, 122, 26}, },
            {{65, 100, -29}, {101, 101, 88}, {102, 122, 26}, },
            {{65, 98, -28}, {99, 99, 89}, {100, 122, 26}, },
            {{65, 115, -46}, {116, 116, 90}, {117, 122, 26}, },
            {{65, 100, -29}, {101, 101, 91}, {102, 122, 26}, },
            {{65, 90, 26}, {97, 97, 92}, {98, 99, -33}, {100, 115, 26}, {116, 116, 93}, {117, 122, 26}, },
            {{65, 109, -31}, {110, 110, 94}, {111, 122, 26}, },
            {{65, 99, -28}, {100, 117, 26}, {118, 118, 95}, {119, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 100, -29}, {101, 101, 96}, {102, 122, 26}, },
            {{65, 105, -42}, {106, 115, 26}, {116, 116, 97}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 114, 26}, {115, 115, 98}, {116, 122, 26}, },
            {{65, 97, -44}, {98, 98, 99}, {99, 122, -28}, },
            {{0, 65535, -57}, },
            {{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 36, 77}, {37, 37, 100}, {38, 65535, 77}, },
            {{0, 36, 101}, {37, 37, 102}, {38, 65535, 101}, },
            {{0, 9, 101}, {10, 10, 103}, {11, 36, 101}, {37, 65535, -80}, },
            {{0, 8, 104}, {9, 9, 105}, {10, 10, 106}, {11, 12, 104}, {13, 13, 107}, {14, 31, 104}, {32, 32, 105}, {33, 34, 104}, {35, 35, 108}, {36, 36, 104}, {37, 37, 80}, {38, 90, 104}, {91, 93, 105}, {94, 122, 104}, {123, 123, 105}, {124, 124, 104}, {125, 125, 105}, {126, 65535, 104}, },
            {{65, 100, -29}, {101, 101, 109}, {102, 122, 26}, },
            {{65, 109, -31}, {110, 110, 110}, {111, 122, 26}, },
            {{65, 104, -42}, {105, 105, 111}, {106, 122, 26}, },
            {{65, 115, -46}, {116, 116, 112}, {117, 122, 26}, },
            {{65, 90, 113}, {97, 98, 113}, {99, 99, 114}, {100, 122, 113}, },
            {{65, 116, -65}, {117, 117, 115}, {118, 122, 26}, },
            {{65, 115, -46}, {116, 116, 116}, {117, 122, 26}, },
            {{65, 107, -60}, {108, 108, 117}, {109, 122, 26}, },
            {{65, 105, -42}, {106, 110, 26}, {111, 111, 118}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 119}, {100, 122, 26}, },
            {{65, 113, -56}, {114, 114, 120}, {115, 122, 26}, },
            {{65, 102, -43}, {103, 103, 121}, {104, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 115, -46}, {116, 116, 122}, {117, 122, 26}, },
            {{65, 104, -42}, {105, 105, 123}, {106, 122, 26}, },
            {{65, 118, -50}, {119, 119, 124}, {120, 122, 26}, },
            {{65, 104, -42}, {105, 105, 125}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 126}, {102, 116, 26}, {117, 117, 127}, {118, 122, 26}, },
            {{42, 42, 128}, {65, 122, -28}, },
            {{0, 9, 105}, {10, 10, 106}, {11, 12, 105}, {13, 13, 107}, {14, 34, 105}, {35, 35, 129}, {36, 36, 105}, {37, 37, 100}, {38, 65535, 105}, },
            {{0, 65535, -80}, },
            {{0, 34, 130}, {35, 35, 131}, {36, 36, 130}, {37, 37, 102}, {38, 65535, 130}, },
            {{0, 65535, -80}, },
            {{0, 65535, -57}, },
            {{0, 65535, -79}, },
            {{0, 65535, -80}, },
            {{0, 65535, -81}, },
            {{0, 34, -9}, {35, 35, 132}, {36, 65535, -9}, },
            {{65, 122, -28}, },
            {{9, 9, 133}, {10, 10, 134}, {12, 12, 135}, {13, 13, 136}, {32, 32, 137}, {65, 122, -28}, {123, 123, 138}, },
            {{65, 99, -28}, {100, 110, 26}, {111, 111, 139}, {112, 122, 26}, },
            {{65, 100, -29}, {101, 101, 140}, {102, 122, 26}, },
            {{65, 122, -87}, },
            {{65, 99, -87}, {100, 104, 113}, {105, 105, 141}, {106, 122, 113}, },
            {{65, 99, -28}, {100, 100, 142}, {101, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 122, -28}, },
            {{65, 99, -28}, {100, 108, 26}, {109, 109, 143}, {110, 122, 26}, },
            {{65, 104, -42}, {105, 105, 144}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 145}, {102, 122, 26}, },
            {{65, 113, -56}, {114, 114, 146}, {115, 122, 26}, },
            {{65, 104, -42}, {105, 105, 147}, {106, 122, 26}, },
            {{65, 99, -28}, {100, 100, 148}, {101, 122, 26}, },
            {{65, 98, -28}, {99, 99, 149}, {100, 122, 26}, },
            {{65, 110, -113}, {111, 111, 150}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 151}, {100, 122, 26}, },
            {{65, 97, -44}, {98, 98, 152}, {99, 122, -28}, },
            {},
            {{0, 13, -18}, {14, 34, 16}, {35, 35, 153}, {36, 65535, 16}, },
            {{0, 65535, -80}, },
            {{35, 35, 154}, },
            {{0, 34, -9}, {35, 35, 155}, {36, 65535, -9}, },
            {{9, 32, -112}, {123, 123, 138}, },
            {{9, 123, -135}, },
            {{9, 123, -135}, },
            {{9, 9, 133}, {10, 10, 156}, {12, 123, -135}, },
            {{9, 123, -135}, },
            {{118, 118, 157}, },
            {{65, 102, -43}, {103, 103, 158}, {104, 122, 26}, },
            {{65, 113, -56}, {114, 114, 159}, {115, 122, 26}, },
            {{65, 99, -87}, {100, 115, 113}, {116, 116, 160}, {117, 122, 113}, },
            {{65, 100, -29}, {101, 101, 161}, {102, 122, 26}, },
            {{65, 108, -120}, {109, 109, 162}, {110, 122, 26}, },
            {{65, 115, -46}, {116, 116, 163}, {117, 122, 26}, },
            {{65, 101, -53}, {102, 102, 164}, {103, 122, 26}, },
            {{65, 90, 26}, {97, 97, 165}, {98, 122, -33}, },
            {{65, 109, -31}, {110, 110, 166}, {111, 122, 26}, },
            {{65, 100, -29}, {101, 101, 167}, {102, 122, 26}, },
            {{65, 110, -91}, {111, 111, 168}, {112, 122, 26}, },
            {{65, 109, -31}, {110, 110, 169}, {111, 122, 26}, },
            {{65, 115, -75}, {116, 116, 170}, {117, 122, 26}, },
            {{65, 114, -76}, {115, 115, 171}, {116, 122, 26}, },
            {{0, 34, -131}, {35, 35, 172}, {36, 65535, 16}, },
            {{35, 35, 173}, },
            {{0, 8, 174}, {9, 9, 175}, {10, 10, 176}, {11, 12, 174}, {13, 13, 177}, {14, 31, 174}, {32, 32, 175}, {33, 90, 174}, {91, 93, 175}, {94, 122, 174}, {123, 123, 175}, {124, 124, 174}, {125, 125, 175}, {126, 65535, 174}, },
            {{9, 123, -135}, },
            {{101, 101, 178}, },
            {{65, 113, -56}, {114, 114, 179}, {115, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 99, -87}, {100, 100, 113}, {101, 101, 180}, {102, 122, 113}, },
            {{65, 122, -28}, },
            {{65, 90, 26}, {97, 97, 181}, {98, 122, -33}, },
            {{65, 100, -29}, {101, 101, 182}, {102, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 111, -61}, {112, 112, 183}, {113, 122, 26}, },
            {{65, 99, -28}, {100, 100, 184}, {101, 122, 26}, },
            {{65, 98, -28}, {99, 99, 185}, {100, 122, 26}, },
            {{65, 108, -120}, {109, 109, 186}, {110, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 104, -42}, {105, 105, 187}, {106, 122, 26}, },
            {{65, 100, -29}, {101, 101, 188}, {102, 122, 26}, },
            {{0, 9, 175}, {10, 10, 176}, {11, 12, 175}, {13, 13, 177}, {14, 65535, 175}, },
            {{0, 9, 189}, {10, 10, 190}, {11, 12, 189}, {13, 13, 191}, {14, 65535, 189}, },
            {{0, 65535, -157}, },
            {{0, 65535, -174}, },
            {},
            {{10, 10, 192}, },
            {{114, 114, 193}, },
            {{65, 90, 26}, {97, 97, 194}, {98, 122, -33}, },
            {{65, 122, -87}, },
            {{65, 109, -31}, {110, 110, 195}, {111, 122, 26}, },
            {{65, 90, 196}, {97, 98, 196}, {99, 99, 197}, {100, 122, 196}, },
            {{65, 103, -30}, {104, 104, 198}, {105, 122, 26}, },
            {{65, 100, -29}, {101, 101, 199}, {102, 122, 26}, },
            {{65, 110, -91}, {111, 111, 200}, {112, 122, 26}, },
            {{65, 108, -120}, {109, 109, 201}, {110, 122, 26}, },
            {{65, 110, -113}, {111, 111, 202}, {112, 122, 26}, },
            {{65, 98, -28}, {99, 99, 203}, {100, 122, 26}, },
            {{0, 65535, -175}, },
            {},
            {{10, 10, 204}, },
            {},
            {{98, 98, 205}, },
            {{65, 111, -61}, {112, 112, 206}, {113, 122, 26}, },
            {{65, 99, -28}, {100, 100, 207}, {101, 122, 26}, },
            {{65, 122, -184}, },
            {{65, 99, -184}, {100, 104, 196}, {105, 105, 208}, {106, 122, 196}, },
            {{65, 122, -28}, },
            {{65, 99, -28}, {100, 119, 26}, {120, 120, 209}, {121, 122, 26}, },
            {{65, 108, -120}, {109, 109, 210}, {110, 122, 26}, },
            {{65, 90, 26}, {97, 97, 211}, {98, 122, -33}, },
            {{65, 109, -31}, {110, 110, 212}, {111, 122, 26}, },
            {{65, 115, -75}, {116, 116, 213}, {117, 122, 26}, },
            {},
            {{97, 97, 214}, },
            {{65, 103, -30}, {104, 104, 215}, {105, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 99, -184}, {100, 115, 196}, {116, 116, 216}, {117, 122, 196}, },
            {{65, 122, -28}, },
            {{65, 108, -120}, {109, 109, 217}, {110, 122, 26}, },
            {{65, 109, -31}, {110, 110, 218}, {111, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 104, -42}, {105, 105, 219}, {106, 122, 26}, },
            {{116, 116, 220}, },
            {{65, 99, -28}, {100, 120, 26}, {121, 121, 221}, {122, 122, 26}, },
            {{65, 99, -184}, {100, 100, 196}, {101, 101, 222}, {102, 122, 196}, },
            {{65, 90, 26}, {97, 97, 223}, {98, 122, -33}, },
            {{65, 99, -28}, {100, 100, 224}, {101, 122, 26}, },
            {{65, 110, -113}, {111, 111, 225}, {112, 122, 26}, },
            {{105, 105, 226}, },
            {{65, 114, -76}, {115, 115, 227}, {116, 122, 26}, },
            {{65, 122, -184}, },
            {{65, 109, -31}, {110, 110, 228}, {111, 122, 26}, },
            {{65, 122, -28}, },
            {{65, 109, -31}, {110, 110, 229}, {111, 122, 26}, },
            {{109, 109, 230}, },
            {{65, 115, -46}, {116, 116, 231}, {117, 122, 26}, },
            {{65, 99, -28}, {100, 100, 232}, {101, 122, 26}, },
            {{65, 122, -28}, },
            {{42, 42, 233}, {125, 125, 234}, },
            {{65, 120, -217}, {121, 121, 235}, {122, 122, 26}, },
            {{65, 122, -28}, },
            {{125, 125, 236}, },
            {},
            {{65, 107, -60}, {108, 108, 237}, {109, 122, 26}, },
            {},
            {{65, 100, -29}, {101, 101, 238}, {102, 122, 26}, },
            {{65, 122, -28}, },
        }
        { // COMCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 36, 1}, {37, 37, 7}, {38, 41, 1}, {42, 42, 8}, {43, 90, 1}, {91, 91, 9}, {92, 92, 10}, {93, 93, 11}, {94, 122, 1}, {123, 123, 12}, {124, 124, 1}, {125, 125, 13}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 14}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 32, -2}, {33, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 15}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 16}, {9, 9, 17}, {10, 10, 18}, {11, 12, 16}, {13, 13, 19}, {14, 31, 16}, {32, 32, 17}, {33, 34, 16}, {35, 35, 20}, {36, 90, 16}, {91, 93, 17}, {94, 122, 16}, {123, 123, 17}, {124, 124, 16}, {125, 125, 17}, {126, 65535, 16}, },
            {{0, 65535, -3}, },
            {},
            {{0, 8, 21}, {9, 9, 22}, {10, 10, 23}, {11, 11, 21}, {12, 12, 24}, {13, 13, 25}, {14, 31, 21}, {32, 32, 26}, {33, 64, 21}, {65, 90, 27}, {91, 96, 21}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 27}, {101, 101, 30}, {102, 104, 27}, {105, 105, 31}, {106, 107, 27}, {108, 108, 32}, {109, 109, 27}, {110, 110, 33}, {111, 111, 27}, {112, 112, 34}, {113, 113, 27}, {114, 114, 35}, {115, 115, 36}, {116, 117, 27}, {118, 118, 37}, {119, 122, 27}, {123, 65535, 21}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 32, -9}, {33, 90, 16}, {91, 65535, -9}, },
            {{0, 9, 17}, {10, 10, 18}, {11, 12, 17}, {13, 13, 19}, {14, 65535, 17}, },
            {},
            {{10, 10, 38}, },
            {{0, 34, -9}, {35, 35, 39}, {36, 65535, -9}, },
            {},
            {},
            {},
            {},
            {{10, 10, 40}, },
            {},
            {{65, 90, 27}, {97, 98, 27}, {99, 99, 41}, {100, 122, 27}, },
            {{65, 99, -29}, {100, 100, 27}, {101, 101, 42}, {102, 104, 27}, {105, 105, 43}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 103, 27}, {104, 104, 44}, {105, 105, 45}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 109, 27}, {110, 110, 46}, {111, 122, 27}, },
            {{65, 109, -32}, {110, 110, 47}, {111, 122, 27}, },
            {{65, 90, 27}, {97, 97, 48}, {98, 98, 27}, {99, 122, -29}, },
            {{65, 100, -30}, {101, 101, 49}, {102, 122, 27}, },
            {{65, 90, 27}, {97, 97, 50}, {98, 99, -34}, {100, 113, 27}, {114, 114, 51}, {115, 122, 27}, },
            {{65, 100, -30}, {101, 101, 52}, {102, 122, 27}, },
            {{65, 100, -30}, {101, 101, 53}, {102, 116, 27}, {117, 117, 54}, {118, 122, 27}, },
            {{65, 100, -30}, {101, 101, 55}, {102, 122, 27}, },
            {},
            {{0, 34, -9}, {35, 35, 56}, {36, 65535, -9}, },
            {},
            {{65, 99, -29}, {100, 104, 27}, {105, 105, 57}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 102, 27}, {103, 103, 58}, {104, 122, 27}, },
            {{65, 90, 27}, {97, 97, 27}, {98, 98, 59}, {99, 122, -29}, },
            {{65, 90, 27}, {97, 97, 60}, {98, 122, -34}, },
            {{65, 99, -29}, {100, 115, 27}, {116, 116, 61}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 100, 62}, {101, 122, 27}, },
            {{65, 98, -29}, {99, 99, 63}, {100, 111, 27}, {112, 112, 64}, {113, 122, 27}, },
            {{65, 97, -45}, {98, 98, 65}, {99, 122, -29}, },
            {{65, 99, -29}, {100, 118, 27}, {119, 119, 66}, {120, 120, 67}, {121, 122, 27}, },
            {{65, 102, -44}, {103, 103, 68}, {104, 113, 27}, {114, 114, 69}, {115, 122, 27}, },
            {{65, 99, -29}, {100, 110, 27}, {111, 111, 70}, {112, 122, 27}, },
            {{65, 99, -29}, {100, 101, 27}, {102, 102, 71}, {103, 109, 27}, {110, 110, 72}, {111, 122, 27}, },
            {{65, 98, -29}, {99, 99, 73}, {100, 122, 27}, },
            {{65, 97, -45}, {98, 98, 74}, {99, 122, -29}, },
            {{65, 99, -29}, {100, 113, 27}, {114, 114, 75}, {115, 122, 27}, },
            {{0, 8, 76}, {9, 9, 77}, {10, 10, 78}, {11, 12, 76}, {13, 13, 79}, {14, 31, 76}, {32, 32, 77}, {33, 36, 76}, {37, 37, 80}, {38, 90, 76}, {91, 93, 77}, {94, 122, 76}, {123, 123, 77}, {124, 124, 76}, {125, 125, 77}, {126, 65535, 76}, },
            {{65, 115, -47}, {116, 116, 81}, {117, 122, 27}, },
            {{65, 104, -43}, {105, 105, 82}, {106, 122, 27}, },
            {{65, 99, -29}, {100, 107, 27}, {108, 108, 83}, {109, 122, 27}, },
            {{65, 99, -29}, {100, 111, 27}, {112, 112, 84}, {113, 122, 27}, },
            {{65, 100, -30}, {101, 101, 85}, {102, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 105, -43}, {106, 107, 27}, {108, 108, 86}, {109, 122, 27}, },
            {{65, 99, -29}, {100, 116, 27}, {117, 117, 87}, {118, 122, 27}, },
            {{65, 100, -30}, {101, 101, 88}, {102, 122, 27}, },
            {{65, 98, -29}, {99, 99, 89}, {100, 122, 27}, },
            {{65, 115, -47}, {116, 116, 90}, {117, 122, 27}, },
            {{65, 100, -30}, {101, 101, 91}, {102, 122, 27}, },
            {{65, 90, 27}, {97, 97, 92}, {98, 99, -34}, {100, 115, 27}, {116, 116, 93}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 117, 27}, {118, 118, 94}, {119, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 100, -30}, {101, 101, 95}, {102, 122, 27}, },
            {{65, 105, -43}, {106, 115, 27}, {116, 116, 96}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 114, 27}, {115, 115, 97}, {116, 122, 27}, },
            {{65, 97, -45}, {98, 98, 98}, {99, 122, -29}, },
            {{0, 65535, -58}, },
            {{0, 9, 77}, {10, 10, 78}, {11, 12, 77}, {13, 13, 79}, {14, 36, 77}, {37, 37, 99}, {38, 65535, 77}, },
            {{0, 36, 100}, {37, 37, 101}, {38, 65535, 100}, },
            {{0, 9, 100}, {10, 10, 102}, {11, 36, 100}, {37, 65535, -80}, },
            {{0, 8, 103}, {9, 9, 104}, {10, 10, 105}, {11, 12, 103}, {13, 13, 106}, {14, 31, 103}, {32, 32, 104}, {33, 34, 103}, {35, 35, 107}, {36, 36, 103}, {37, 37, 80}, {38, 90, 103}, {91, 93, 104}, {94, 122, 103}, {123, 123, 104}, {124, 124, 103}, {125, 125, 104}, {126, 65535, 103}, },
            {{65, 100, -30}, {101, 101, 108}, {102, 122, 27}, },
            {{65, 109, -32}, {110, 110, 109}, {111, 122, 27}, },
            {{65, 104, -43}, {105, 105, 110}, {106, 122, 27}, },
            {{65, 115, -47}, {116, 116, 111}, {117, 122, 27}, },
            {{65, 90, 112}, {97, 98, 112}, {99, 99, 113}, {100, 122, 112}, },
            {{65, 116, -66}, {117, 117, 114}, {118, 122, 27}, },
            {{65, 115, -47}, {116, 116, 115}, {117, 122, 27}, },
            {{65, 107, -61}, {108, 108, 116}, {109, 122, 27}, },
            {{65, 105, -43}, {106, 110, 27}, {111, 111, 117}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 118}, {100, 122, 27}, },
            {{65, 113, -57}, {114, 114, 119}, {115, 122, 27}, },
            {{65, 102, -44}, {103, 103, 120}, {104, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 104, -43}, {105, 105, 121}, {106, 122, 27}, },
            {{65, 118, -51}, {119, 119, 122}, {120, 122, 27}, },
            {{65, 104, -43}, {105, 105, 123}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 124}, {102, 116, 27}, {117, 117, 125}, {118, 122, 27}, },
            {{42, 42, 126}, {65, 122, -29}, },
            {{0, 9, 104}, {10, 10, 105}, {11, 12, 104}, {13, 13, 106}, {14, 34, 104}, {35, 35, 127}, {36, 36, 104}, {37, 37, 99}, {38, 65535, 104}, },
            {{0, 65535, -80}, },
            {{0, 34, 128}, {35, 35, 129}, {36, 36, 128}, {37, 37, 101}, {38, 65535, 128}, },
            {{0, 65535, -80}, },
            {{0, 65535, -58}, },
            {{0, 65535, -79}, },
            {{0, 65535, -80}, },
            {{0, 65535, -81}, },
            {{0, 34, -9}, {35, 35, 130}, {36, 65535, -9}, },
            {{65, 122, -29}, },
            {{9, 9, 131}, {10, 10, 132}, {12, 12, 133}, {13, 13, 134}, {32, 32, 135}, {65, 122, -29}, {123, 123, 136}, },
            {{65, 110, -53}, {111, 111, 137}, {112, 122, 27}, },
            {{65, 100, -30}, {101, 101, 138}, {102, 122, 27}, },
            {{65, 122, -87}, },
            {{65, 99, -87}, {100, 104, 112}, {105, 105, 139}, {106, 122, 112}, },
            {{65, 99, -29}, {100, 100, 140}, {101, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 122, -29}, },
            {{65, 99, -29}, {100, 108, 27}, {109, 109, 141}, {110, 122, 27}, },
            {{65, 104, -43}, {105, 105, 142}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 143}, {102, 122, 27}, },
            {{65, 113, -57}, {114, 114, 144}, {115, 122, 27}, },
            {{65, 99, -29}, {100, 100, 145}, {101, 122, 27}, },
            {{65, 98, -29}, {99, 99, 146}, {100, 122, 27}, },
            {{65, 110, -53}, {111, 111, 147}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 148}, {100, 122, 27}, },
            {{65, 97, -45}, {98, 98, 149}, {99, 122, -29}, },
            {},
            {{0, 13, -19}, {14, 34, 17}, {35, 35, 150}, {36, 65535, 17}, },
            {{0, 65535, -80}, },
            {{35, 35, 151}, },
            {{0, 34, -9}, {35, 35, 152}, {36, 65535, -9}, },
            {{9, 32, -111}, {123, 123, 136}, },
            {{9, 123, -133}, },
            {{9, 123, -133}, },
            {{9, 9, 131}, {10, 10, 153}, {12, 123, -133}, },
            {{9, 123, -133}, },
            {{118, 118, 154}, },
            {{65, 102, -44}, {103, 103, 155}, {104, 122, 27}, },
            {{65, 113, -57}, {114, 114, 156}, {115, 122, 27}, },
            {{65, 99, -87}, {100, 115, 112}, {116, 116, 157}, {117, 122, 112}, },
            {{65, 100, -30}, {101, 101, 158}, {102, 122, 27}, },
            {{65, 108, -119}, {109, 109, 159}, {110, 122, 27}, },
            {{65, 115, -47}, {116, 116, 160}, {117, 122, 27}, },
            {{65, 101, -54}, {102, 102, 161}, {103, 122, 27}, },
            {{65, 90, 27}, {97, 97, 162}, {98, 122, -34}, },
            {{65, 100, -30}, {101, 101, 163}, {102, 122, 27}, },
            {{65, 110, -91}, {111, 111, 164}, {112, 122, 27}, },
            {{65, 109, -32}, {110, 110, 165}, {111, 122, 27}, },
            {{65, 115, -75}, {116, 116, 166}, {117, 122, 27}, },
            {{65, 114, -76}, {115, 115, 167}, {116, 122, 27}, },
            {{0, 34, -129}, {35, 35, 168}, {36, 65535, 17}, },
            {{35, 35, 169}, },
            {{0, 8, 170}, {9, 9, 171}, {10, 10, 172}, {11, 12, 170}, {13, 13, 173}, {14, 31, 170}, {32, 32, 171}, {33, 90, 170}, {91, 93, 171}, {94, 122, 170}, {123, 123, 171}, {124, 124, 170}, {125, 125, 171}, {126, 65535, 170}, },
            {{9, 123, -133}, },
            {{101, 101, 174}, },
            {{65, 113, -57}, {114, 114, 175}, {115, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 99, -87}, {100, 100, 112}, {101, 101, 176}, {102, 122, 112}, },
            {{65, 122, -29}, },
            {{65, 90, 27}, {97, 97, 177}, {98, 122, -34}, },
            {{65, 100, -30}, {101, 101, 178}, {102, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 111, -62}, {112, 112, 179}, {113, 122, 27}, },
            {{65, 98, -29}, {99, 99, 180}, {100, 122, 27}, },
            {{65, 108, -119}, {109, 109, 181}, {110, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 104, -43}, {105, 105, 182}, {106, 122, 27}, },
            {{65, 100, -30}, {101, 101, 183}, {102, 122, 27}, },
            {{0, 9, 171}, {10, 10, 172}, {11, 12, 171}, {13, 13, 173}, {14, 65535, 171}, },
            {{0, 9, 184}, {10, 10, 185}, {11, 12, 184}, {13, 13, 186}, {14, 65535, 184}, },
            {{0, 65535, -154}, },
            {{0, 65535, -170}, },
            {},
            {{10, 10, 187}, },
            {{114, 114, 188}, },
            {{65, 90, 27}, {97, 97, 189}, {98, 122, -34}, },
            {{65, 122, -87}, },
            {{65, 109, -32}, {110, 110, 190}, {111, 122, 27}, },
            {{65, 90, 191}, {97, 98, 191}, {99, 99, 192}, {100, 122, 191}, },
            {{65, 103, -31}, {104, 104, 193}, {105, 122, 27}, },
            {{65, 110, -91}, {111, 111, 194}, {112, 122, 27}, },
            {{65, 108, -119}, {109, 109, 195}, {110, 122, 27}, },
            {{65, 110, -53}, {111, 111, 196}, {112, 122, 27}, },
            {{65, 98, -29}, {99, 99, 197}, {100, 122, 27}, },
            {{0, 65535, -171}, },
            {},
            {{10, 10, 198}, },
            {},
            {{98, 98, 199}, },
            {{65, 111, -62}, {112, 112, 200}, {113, 122, 27}, },
            {{65, 99, -29}, {100, 100, 201}, {101, 122, 27}, },
            {{65, 122, -180}, },
            {{65, 99, -180}, {100, 104, 191}, {105, 105, 202}, {106, 122, 191}, },
            {{65, 122, -29}, },
            {{65, 108, -119}, {109, 109, 203}, {110, 122, 27}, },
            {{65, 90, 27}, {97, 97, 204}, {98, 122, -34}, },
            {{65, 109, -32}, {110, 110, 205}, {111, 122, 27}, },
            {{65, 115, -75}, {116, 116, 206}, {117, 122, 27}, },
            {},
            {{97, 97, 207}, },
            {{65, 103, -31}, {104, 104, 208}, {105, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 99, -180}, {100, 115, 191}, {116, 116, 209}, {117, 122, 191}, },
            {{65, 108, -119}, {109, 109, 210}, {110, 122, 27}, },
            {{65, 109, -32}, {110, 110, 211}, {111, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 104, -43}, {105, 105, 212}, {106, 122, 27}, },
            {{116, 116, 213}, },
            {{65, 99, -29}, {100, 120, 27}, {121, 121, 214}, {122, 122, 27}, },
            {{65, 99, -180}, {100, 100, 191}, {101, 101, 215}, {102, 122, 191}, },
            {{65, 90, 27}, {97, 97, 216}, {98, 122, -34}, },
            {{65, 99, -29}, {100, 100, 217}, {101, 122, 27}, },
            {{65, 110, -53}, {111, 111, 218}, {112, 122, 27}, },
            {{105, 105, 219}, },
            {{65, 114, -76}, {115, 115, 220}, {116, 122, 27}, },
            {{65, 122, -180}, },
            {{65, 109, -32}, {110, 110, 221}, {111, 122, 27}, },
            {{65, 122, -29}, },
            {{65, 109, -32}, {110, 110, 222}, {111, 122, 27}, },
            {{109, 109, 223}, },
            {{65, 115, -47}, {116, 116, 224}, {117, 122, 27}, },
            {{65, 99, -29}, {100, 100, 225}, {101, 122, 27}, },
            {{65, 122, -29}, },
            {{42, 42, 226}, {125, 125, 227}, },
            {{65, 120, -210}, {121, 121, 228}, {122, 122, 27}, },
            {{65, 122, -29}, },
            {{125, 125, 229}, },
            {},
            {{65, 107, -61}, {108, 108, 230}, {109, 122, 27}, },
            {},
            {{65, 100, -30}, {101, 101, 231}, {102, 122, 27}, },
            {{65, 122, -29}, },
        }
        { // BLOCKCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 122, 1}, {123, 123, 8}, {124, 124, 1}, {125, 125, 9}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 91, 1}, {93, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 10}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 91, -2}, {93, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 11}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 8, 12}, {9, 9, 13}, {10, 10, 14}, {11, 11, 12}, {12, 12, 15}, {13, 13, 16}, {14, 31, 12}, {32, 32, 17}, {33, 64, 12}, {65, 90, 18}, {91, 96, 12}, {97, 122, 18}, {123, 65535, 12}, },
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 19}, },
            {},
            {{65, 90, 18}, {97, 122, 18}, },
            {},
        }
        { // OPTCAPT
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 90, 1}, {91, 91, 7}, {92, 92, 8}, {93, 93, 9}, {94, 122, 1}, {123, 123, 10}, {124, 124, 1}, {125, 125, 11}, {126, 65535, 1}, },
            {{0, 8, 1}, {11, 12, 1}, {14, 31, 1}, {33, 90, 1}, {94, 122, 1}, {124, 124, 1}, {126, 65535, 1}, },
            {{9, 10, -2}, {12, 12, 12}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{0, 90, -2}, {94, 65535, -3}, },
            {{9, 9, 2}, {10, 10, 13}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 8, 14}, {9, 9, 15}, {10, 10, 16}, {11, 11, 14}, {12, 12, 17}, {13, 13, 18}, {14, 31, 14}, {32, 32, 19}, {33, 64, 14}, {65, 90, 20}, {91, 96, 14}, {97, 122, 20}, {123, 65535, 14}, },
            {},
            {},
            {},
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {},
            {},
            {},
            {{10, 10, 21}, },
            {},
            {{65, 90, 20}, {97, 122, 20}, },
            {},
        }
        { // VERBATIM
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 91, 1}, {92, 92, 7}, {93, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 8}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 9}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{101, 101, 10}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{110, 110, 11}, },
            {{100, 100, 12}, },
            {{123, 123, 13}, },
            {{118, 118, 14}, },
            {{101, 101, 15}, },
            {{114, 114, 16}, },
            {{98, 98, 17}, },
            {{97, 97, 18}, },
            {{116, 116, 19}, },
            {{105, 105, 20}, },
            {{109, 109, 21}, },
            {{42, 42, 22}, {125, 125, 23}, },
            {{125, 125, 24}, },
            {},
            {},
        }
        { // VERB
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 65535, 1}, },
            {},
            {{9, 10, -2}, {12, 12, 7}, {13, 13, 5}, {32, 32, 6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 9, 2}, {10, 10, 8}, {12, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // NORMAL
        {-1, 33, 0, 0, 0, 0, 0, 33, 28, -1, 29, 26, 27, 0, 0, 33, 35, 35, 35, 33, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 33, 35, 35, 35, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 30, 22, 35, -1, -1, 35, 33, 35, 35, 35, 33, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 35, -1, -1, 33, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, -1, 33, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 30, 34, -1, 30, 16, 11, 18, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // COMCAPT
        {-1, 33, 0, 0, 0, 0, 0, 33, 25, 28, -1, 29, 26, 27, 0, 0, 33, 35, 35, 35, 33, 31, 32, 32, 31, 32, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, 33, 32, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 33, 30, 30, 30, 30, 30, 13, 30, 30, 30, 30, 30, 30, 30, 30, 10, 30, 30, 30, 30, 33, 35, 35, 35, 33, 30, 30, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 1, 30, 30, 30, 30, 22, 35, -1, -1, 35, 33, 35, 35, 35, 33, 11, 12, 30, 30, 11, 11, 30, 14, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 22, 35, -1, -1, 33, -1, -1, -1, -1, -1, -1, 30, 30, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, -1, 33, -1, -1, 30, 2, 11, 15, 30, 30, 10, 30, 30, 30, 3, 30, 30, 34, 34, 33, 34, 34, 34, -1, 30, 11, 30, 11, 30, 30, 30, 30, 30, 34, 34, 34, 34, -1, 30, 30, 11, 11, 6, 30, 30, 30, 30, 34, -1, 30, 16, 11, 30, 30, 4, 30, -1, 30, 11, 30, 30, 30, -1, 7, 11, 30, 17, 30, -1, 30, 30, 5, -1, 30, 16, -1, 19, 30, 19, 30, 8, },
        // BLOCKCAPT
        {-1, 23, 0, 0, 0, 0, 0, -1, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // OPTCAPT
        {-1, 24, 0, 0, 0, 0, 0, 28, -1, 29, 26, 27, 0, 0, 31, 32, 32, 31, 32, 32, 30, 32, },
        // VERBATIM
        {-1, 21, 0, 0, 0, 0, 0, 21, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, },
        // VERB
        {-1, 21, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State NORMAL = new State(0);
        public final static State COMCAPT = new State(1);
        public final static State BLOCKCAPT = new State(2);
        public final static State OPTCAPT = new State(3);
        public final static State VERBATIM = new State(4);
        public final static State VERB = new State(5);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
